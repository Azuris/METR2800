
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000076f  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003be  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  0000152b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a0  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e4  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00001fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	if (ch > 0x03) {
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
		return ADC;
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	}        
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	return(ADC);
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
}
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1B = 1050;
			}
			watch_delay(3000000);
			side ^= 1;
		} 
		adOne = ADC_Run(0x00);
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
		adTwo = ADC_Run(0x01);
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
		//ad's below 5 (0.02mV) either side of the beacons
		if (adOne < 5 && adTwo < 5) {
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			OCR0A = 5;
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			OCR1A = 0; //(push)
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			watch_delay(3000000);
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			OCR1A = 0; //(pull)
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
			if (side == 0) {
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
				OCR1B = 1020;
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
				watch_delay(3000000);
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
  80:	1a b8       	out	0x0a, r1	; 10
  82:	14 b8       	out	0x04, r1	; 4
			}
			OCR0A = 171;
  84:	0e 94 56 00 	call	0xac	; 0xac <timer0_init>
			while (1) {
				adVolts = ADC_Run(0x02);
  88:	0e 94 61 00 	call	0xc2	; 0xc2 <timer1_init>
  8c:	2b ea       	ldi	r18, 0xAB	; 171
				if (adVolts < 5) {
  8e:	85 e0       	ldi	r24, 0x05	; 5
  90:	4a 9b       	sbis	0x09, 2	; 9
					OCR0A = 5;
  92:	0a c0       	rjmp	.+20     	; 0xa8 <main+0x28>
  94:	99 b1       	in	r25, 0x09	; 9
		}
		
		break;
	}
	return;
}
  96:	94 30       	cpi	r25, 0x04	; 4
  98:	09 f4       	brne	.+2      	; 0x9c <main+0x1c>
  9a:	87 bd       	out	0x27, r24	; 39
  9c:	99 b1       	in	r25, 0x09	; 9
				OCR0A = 5;
			}
			if (PIND == 0x05) {
				//Mode_Two();
			}
			if (PIND == 0x06) {
  9e:	99 b1       	in	r25, 0x09	; 9
  a0:	96 30       	cpi	r25, 0x06	; 6
  a2:	09 f4       	brne	.+2      	; 0xa6 <main+0x26>
				//Mode_Three();
				OCR0A = 171;
  a4:	27 bd       	out	0x27, r18	; 39
			}
			if (PIND == 0x07) {
  a6:	99 b1       	in	r25, 0x09	; 9
				//Mode_Four();
			}
		}
		OCR0A = 5;
  a8:	87 bd       	out	0x27, r24	; 39
	}		
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main+0x10>

000000ac <timer0_init>:
#include "Timer0.h"
 /** Set up Timer0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescaler 1024 (16Mhz)  64 (1MHz)**/
void timer0_init(void) {

	DDRD |= (1 << DDD6);
  ac:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
  ae:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
  b0:	84 b5       	in	r24, 0x24	; 36
  b2:	83 68       	ori	r24, 0x83	; 131
  b4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02)|(1<<CS00); //61.3Hz
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	85 bd       	out	0x25, r24	; 37

	OCR0A = 5;//178;//191; //75% voltage Max = 255 
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	87 bd       	out	0x27, r24	; 39
  c0:	08 95       	ret

000000c2 <timer1_init>:
/** Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescaler 64 to 1 for 1 Mhz and initialise the duty cycle to 
5%**/
void timer1_init(void) {
	
	DDRB |= (1 << DDB1)|(1 << DDB2);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	86 60       	ori	r24, 0x06	; 6
  c6:	84 b9       	out	0x04, r24	; 4
	ICR1 = 39999;// for 16Mhz;
  c8:	8f e3       	ldi	r24, 0x3F	; 63
  ca:	9c e9       	ldi	r25, 0x9C	; 156
  cc:	90 93 87 00 	sts	0x0087, r25
  d0:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
  d4:	10 92 85 00 	sts	0x0085, r1
  d8:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1<<WGM12)|(1<<WGM11);
  dc:	e0 e8       	ldi	r30, 0x80	; 128
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8a 6a       	ori	r24, 0xAA	; 170
  e4:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)||(1<<CS11);
  e6:	e1 e8       	ldi	r30, 0x81	; 129
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24

	
	OCR1A = 1300; //Release
  f0:	84 e1       	ldi	r24, 0x14	; 20
  f2:	95 e0       	ldi	r25, 0x05	; 5
  f4:	90 93 89 00 	sts	0x0089, r25
  f8:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 4799; //Fan Rotate
  fc:	8f eb       	ldi	r24, 0xBF	; 191
  fe:	92 e1       	ldi	r25, 0x12	; 18
 100:	90 93 8b 00 	sts	0x008B, r25
 104:	80 93 8a 00 	sts	0x008A, r24
 108:	08 95       	ret

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
