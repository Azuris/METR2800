
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000011b  00800114  00800114  000005bc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000178  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fcf  00000000  00000000  00000ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007e7  00000000  00000000  00001e95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000097b  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c0  00000000  00000000  00002ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ca  00000000  00000000  000032b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005c8  00000000  00000000  00003682  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000f0  00000000  00000000  00003c4a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_18>
  4c:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 32       	cpi	r26, 0x2F	; 47
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ReadADC>:
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	if (ch > 0x03) {
  a6:	84 30       	cpi	r24, 0x04	; 4
  a8:	28 f0       	brcs	.+10     	; 0xb4 <ReadADC+0xe>
		return ADC;
  aa:	20 91 78 00 	lds	r18, 0x0078
  ae:	30 91 79 00 	lds	r19, 0x0079
  b2:	11 c0       	rjmp	.+34     	; 0xd6 <ReadADC+0x30>
	}        
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  be:	80 81       	ld	r24, Z
  c0:	84 ff       	sbrs	r24, 4
  c2:	fd cf       	rjmp	.-6      	; 0xbe <ReadADC+0x18>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  c4:	ea e7       	ldi	r30, 0x7A	; 122
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 61       	ori	r24, 0x10	; 16
  cc:	80 83       	st	Z, r24

	return(ADC);
  ce:	20 91 78 00 	lds	r18, 0x0078
  d2:	30 91 79 00 	lds	r19, 0x0079
}
  d6:	82 2f       	mov	r24, r18
  d8:	93 2f       	mov	r25, r19
  da:	08 95       	ret

000000dc <ADC_Run>:
	uint16_t adc_result;

	//Initialize ADC
	//InitADC();

	adc_result=ReadADC(channel);           // Read Analog value from channel-4
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadADC>
	
	return adc_result;
}
  e0:	08 95       	ret

000000e2 <main>:
void test_run(void);
void fan_run(void);

int main(void) {

	DDRD = 0x00;
  e2:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0x00;
  e4:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x00;
  e6:	14 b8       	out	0x04, r1	; 4
	//ADC_Throw();
	//timer0_init(191); //move to mode operation part for final
	timer1_init();
  e8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <timer1_init>
	//fan_run();
	//test_run();
	init_serial_stdio(19200, 0);
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	7b e4       	ldi	r23, 0x4B	; 75
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 01 01 	call	0x202	; 0x202 <init_serial_stdio>
	clear_serial_input_buffer();
  fa:	0e 94 53 01 	call	0x2a6	; 0x2a6 <clear_serial_input_buffer>
	sei();
  fe:	78 94       	sei
	while(1) {
		if (PIND & (1 << PIND0)) {
 100:	48 9b       	sbis	0x09, 0	; 9
 102:	08 c0       	rjmp	.+16     	; 0x114 <main+0x32>
			
			//watch_delay(6000000);
			
			//timer0_init();
			
			if (PIND == 0x01) {
 104:	89 b1       	in	r24, 0x09	; 9
				//Mode_One();
			}
			if (PIND == 0x03) {
 106:	89 b1       	in	r24, 0x09	; 9
 108:	83 30       	cpi	r24, 0x03	; 3
 10a:	11 f4       	brne	.+4      	; 0x110 <main+0x2e>
				Mode_Two();
 10c:	0e 94 8f 00 	call	0x11e	; 0x11e <Mode_Two>
	
			}
			if (PIND == 0x05) {
 110:	89 b1       	in	r24, 0x09	; 9
				//Mode_Three();
			}
			if (PIND == 0x07) {
 112:	89 b1       	in	r24, 0x09	; 9
				//Mode_Four();
			}
		}
		printf("fssf\n");
 114:	8e e0       	ldi	r24, 0x0E	; 14
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 59 02 	call	0x4b2	; 0x4b2 <puts>
	}		
 11c:	f1 cf       	rjmp	.-30     	; 0x100 <main+0x1e>

0000011e <Mode_Two>:
			}
		}
		if (adOne > adTwo) {
			if (side == 0) {
				timer0_off();
				OCR1A = 197;
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_Run>
				timer0_init(151);
 124:	88 3c       	cpi	r24, 0xC8	; 200
 126:	91 05       	cpc	r25, r1
				side ^= 1;
 128:	d0 f7       	brcc	.-12     	; 0x11e <Mode_Two>
 12a:	88 ec       	ldi	r24, 0xC8	; 200
			} else {
				OCR0A = 151;
 12c:	0e 94 ed 01 	call	0x3da	; 0x3da <timer0_init>
			if (side == 1) {
				
			}
		}		
	}
}
 130:	f6 cf       	rjmp	.-20     	; 0x11e <Mode_Two>

00000132 <uart_put_char>:
	}
#endif
}

#ifdef AVR
static int uart_put_char(char c, FILE* stream) {
 132:	cf 93       	push	r28
 134:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
 136:	8a 30       	cpi	r24, 0x0A	; 10
 138:	19 f4       	brne	.+6      	; 0x140 <uart_put_char+0xe>
		uart_put_char('\r', stream);
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	0e 94 99 00 	call	0x132	; 0x132 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
 140:	2f b7       	in	r18, 0x3f	; 63
 142:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 144:	02 c0       	rjmp	.+4      	; 0x14a <uart_put_char+0x18>
		if(!interrupts_enabled) {
 146:	22 23       	and	r18, r18
 148:	29 f1       	breq	.+74     	; 0x194 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 14a:	90 91 16 01 	lds	r25, 0x0116
 14e:	9f 3f       	cpi	r25, 0xFF	; 255
 150:	d1 f3       	breq	.-12     	; 0x146 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
 152:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
 154:	80 91 15 01 	lds	r24, 0x0115
 158:	e8 2f       	mov	r30, r24
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	e9 5e       	subi	r30, 0xE9	; 233
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	c0 83       	st	Z, r28
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 15 01 	sts	0x0115, r24
	bytes_in_out_buffer++;
 168:	80 91 16 01 	lds	r24, 0x0116
 16c:	8f 5f       	subi	r24, 0xFF	; 255
 16e:	80 93 16 01 	sts	0x0116, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
 172:	80 91 15 01 	lds	r24, 0x0115
 176:	8f 3f       	cpi	r24, 0xFF	; 255
 178:	11 f4       	brne	.+4      	; 0x17e <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
 17a:	10 92 15 01 	sts	0x0115, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
 17e:	e1 ec       	ldi	r30, 0xC1	; 193
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 62       	ori	r24, 0x20	; 32
 186:	80 83       	st	Z, r24
	if(interrupts_enabled) {
 188:	22 23       	and	r18, r18
 18a:	39 f0       	breq	.+14     	; 0x19a <uart_put_char+0x68>
		sei();
 18c:	78 94       	sei
	}
	return 0;
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	05 c0       	rjmp	.+10     	; 0x19e <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
}
 19e:	82 2f       	mov	r24, r18
 1a0:	93 2f       	mov	r25, r19
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
 1a6:	80 91 28 02 	lds	r24, 0x0228
 1aa:	88 23       	and	r24, r24
 1ac:	e1 f3       	breq	.-8      	; 0x1a6 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
 1ae:	2f b7       	in	r18, 0x3f	; 63
 1b0:	20 78       	andi	r18, 0x80	; 128
	cli();
 1b2:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
 1b4:	80 91 16 02 	lds	r24, 0x0216
 1b8:	30 91 28 02 	lds	r19, 0x0228
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	83 1b       	sub	r24, r19
 1c0:	91 09       	sbc	r25, r1
 1c2:	5a f4       	brpl	.+22     	; 0x1da <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
 1c4:	e0 91 16 02 	lds	r30, 0x0216
 1c8:	80 91 28 02 	lds	r24, 0x0228
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	e8 1b       	sub	r30, r24
 1d0:	f1 09       	sbc	r31, r1
 1d2:	e9 5d       	subi	r30, 0xD9	; 217
 1d4:	fd 4f       	sbci	r31, 0xFD	; 253
 1d6:	80 81       	ld	r24, Z
 1d8:	0a c0       	rjmp	.+20     	; 0x1ee <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
 1da:	e0 91 16 02 	lds	r30, 0x0216
 1de:	80 91 28 02 	lds	r24, 0x0228
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	e8 1b       	sub	r30, r24
 1e6:	f1 09       	sbc	r31, r1
 1e8:	e9 5e       	subi	r30, 0xE9	; 233
 1ea:	fd 4f       	sbci	r31, 0xFD	; 253
 1ec:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
 1ee:	90 91 28 02 	lds	r25, 0x0228
 1f2:	91 50       	subi	r25, 0x01	; 1
 1f4:	90 93 28 02 	sts	0x0228, r25
	if(interrupts_enabled) {
 1f8:	22 23       	and	r18, r18
 1fa:	09 f0       	breq	.+2      	; 0x1fe <uart_get_char+0x58>
		sei();
 1fc:	78 94       	sei
	}	
	return c;
}
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret

00000202 <init_serial_stdio>:
#ifdef AVR
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
 202:	10 92 15 01 	sts	0x0115, r1
	bytes_in_out_buffer = 0;
 206:	10 92 16 01 	sts	0x0116, r1
	input_insert_pos = 0;
 20a:	10 92 16 02 	sts	0x0216, r1
	bytes_in_input_buffer = 0;
 20e:	10 92 28 02 	sts	0x0228, r1
	input_overrun = 0;
 212:	10 92 27 02 	sts	0x0227, r1
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
 216:	40 93 14 01 	sts	0x0114, r20
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (16 * baudrate)) + 1)/2 - 1;
 21a:	dc 01       	movw	r26, r24
 21c:	cb 01       	movw	r24, r22
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	aa 1f       	adc	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	9c 01       	movw	r18, r24
 230:	ad 01       	movw	r20, r26
 232:	22 0f       	add	r18, r18
 234:	33 1f       	adc	r19, r19
 236:	44 1f       	adc	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	22 0f       	add	r18, r18
 23c:	33 1f       	adc	r19, r19
 23e:	44 1f       	adc	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	74 e2       	ldi	r23, 0x24	; 36
 246:	84 ef       	ldi	r24, 0xF4	; 244
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 1b 02 	call	0x436	; 0x436 <__divmodsi4>
 24e:	da 01       	movw	r26, r20
 250:	c9 01       	movw	r24, r18
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	a1 1d       	adc	r26, r1
 256:	b1 1d       	adc	r27, r1
 258:	ac 01       	movw	r20, r24
 25a:	bd 01       	movw	r22, r26
 25c:	bb 23       	and	r27, r27
 25e:	24 f4       	brge	.+8      	; 0x268 <init_serial_stdio+0x66>
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	6f 4f       	sbci	r22, 0xFF	; 255
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	db 01       	movw	r26, r22
 26a:	ca 01       	movw	r24, r20
 26c:	b5 95       	asr	r27
 26e:	a7 95       	ror	r26
 270:	97 95       	ror	r25
 272:	87 95       	ror	r24
 274:	9c 01       	movw	r18, r24
 276:	21 50       	subi	r18, 0x01	; 1
 278:	31 09       	sbc	r19, r1
	UBRR0H = ubrr >> 8;
 27a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = ubrr & 0xFF;
 27e:	20 93 c4 00 	sts	0x00C4, r18
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<TXEN0);
 282:	e1 ec       	ldi	r30, 0xC1	; 193
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<TXCIE0);
 28a:	80 81       	ld	r24, Z
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	90 93 2c 02 	sts	0x022C, r25
 298:	80 93 2b 02 	sts	0x022B, r24
	stdin = &myStream;
 29c:	90 93 2a 02 	sts	0x022A, r25
 2a0:	80 93 29 02 	sts	0x0229, r24
 2a4:	08 95       	ret

000002a6 <clear_serial_input_buffer>:
}

void clear_serial_input_buffer(void) {
#ifdef AVR
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
 2a6:	10 92 16 02 	sts	0x0216, r1
	bytes_in_input_buffer = 0;
 2aa:	10 92 28 02 	sts	0x0228, r1
 2ae:	08 95       	ret

000002b0 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART_UDRE_vect) 
{
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	2f 93       	push	r18
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 2c4:	80 91 16 01 	lds	r24, 0x0116
 2c8:	88 23       	and	r24, r24
 2ca:	29 f1       	breq	.+74     	; 0x316 <__vector_19+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 2cc:	80 91 15 01 	lds	r24, 0x0115
 2d0:	20 91 16 01 	lds	r18, 0x0116
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	82 1b       	sub	r24, r18
 2d8:	91 09       	sbc	r25, r1
 2da:	5a f4       	brpl	.+22     	; 0x2f2 <__vector_19+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 2dc:	e0 91 15 01 	lds	r30, 0x0115
 2e0:	80 91 16 01 	lds	r24, 0x0116
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e8 1b       	sub	r30, r24
 2e8:	f1 09       	sbc	r31, r1
 2ea:	ea 5e       	subi	r30, 0xEA	; 234
 2ec:	fd 4f       	sbci	r31, 0xFD	; 253
 2ee:	80 81       	ld	r24, Z
 2f0:	0a c0       	rjmp	.+20     	; 0x306 <__vector_19+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 2f2:	e0 91 15 01 	lds	r30, 0x0115
 2f6:	80 91 16 01 	lds	r24, 0x0116
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	e8 1b       	sub	r30, r24
 2fe:	f1 09       	sbc	r31, r1
 300:	e9 5e       	subi	r30, 0xE9	; 233
 302:	fe 4f       	sbci	r31, 0xFE	; 254
 304:	80 81       	ld	r24, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 306:	90 91 16 01 	lds	r25, 0x0116
 30a:	91 50       	subi	r25, 0x01	; 1
 30c:	90 93 16 01 	sts	0x0116, r25
		
		/* Output the character via the UART */
		UDR0 = c;
 310:	80 93 c6 00 	sts	0x00C6, r24
 314:	05 c0       	rjmp	.+10     	; 0x320 <__vector_19+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 316:	e1 ec       	ldi	r30, 0xC1	; 193
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	80 83       	st	Z, r24
	}
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	2f 91       	pop	r18
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <__vector_18>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART_RX_vect) 
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	2f 93       	push	r18
 340:	3f 93       	push	r19
 342:	4f 93       	push	r20
 344:	5f 93       	push	r21
 346:	6f 93       	push	r22
 348:	7f 93       	push	r23
 34a:	8f 93       	push	r24
 34c:	9f 93       	push	r25
 34e:	af 93       	push	r26
 350:	bf 93       	push	r27
 352:	cf 93       	push	r28
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	}
#endif
	
	/* Read the character */
	char c;
	c = UDR0;
 358:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 35c:	80 91 14 01 	lds	r24, 0x0114
 360:	88 23       	and	r24, r24
 362:	49 f0       	breq	.+18     	; 0x376 <__vector_18+0x42>
 364:	80 91 16 01 	lds	r24, 0x0116
 368:	8f 3f       	cpi	r24, 0xFF	; 255
 36a:	29 f0       	breq	.+10     	; 0x376 <__vector_18+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 36c:	60 e0       	ldi	r22, 0x00	; 0
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	8c 2f       	mov	r24, r28
 372:	0e 94 99 00 	call	0x132	; 0x132 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 376:	80 91 28 02 	lds	r24, 0x0228
 37a:	80 31       	cpi	r24, 0x10	; 16
 37c:	20 f0       	brcs	.+8      	; 0x386 <__vector_18+0x52>
		input_overrun = 1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 27 02 	sts	0x0227, r24
 384:	18 c0       	rjmp	.+48     	; 0x3b6 <__vector_18+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 386:	cd 30       	cpi	r28, 0x0D	; 13
 388:	09 f4       	brne	.+2      	; 0x38c <__vector_18+0x58>
			c = '\n';
 38a:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 38c:	80 91 16 02 	lds	r24, 0x0216
 390:	e8 2f       	mov	r30, r24
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e9 5e       	subi	r30, 0xE9	; 233
 396:	fd 4f       	sbci	r31, 0xFD	; 253
 398:	c0 83       	st	Z, r28
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 16 02 	sts	0x0216, r24
		bytes_in_input_buffer++;
 3a0:	80 91 28 02 	lds	r24, 0x0228
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 28 02 	sts	0x0228, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 3aa:	80 91 16 02 	lds	r24, 0x0216
 3ae:	80 31       	cpi	r24, 0x10	; 16
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <__vector_18+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 3b2:	10 92 16 02 	sts	0x0216, r1
		}
	}
}
 3b6:	ff 91       	pop	r31
 3b8:	ef 91       	pop	r30
 3ba:	cf 91       	pop	r28
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <timer0_init>:
#include "Timer0.h"
 /** Set up Timer0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescaler 1024 (16Mhz)  64 (1MHz)**/
void timer0_init(uint8_t fan_speed) {

	DDRD |= (1 << DDD6);
 3da:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
 3dc:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 3de:	94 b5       	in	r25, 0x24	; 36
 3e0:	93 68       	ori	r25, 0x83	; 131
 3e2:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1<<CS02)|(1<<CS00); //61.3Hz
 3e4:	95 b5       	in	r25, 0x25	; 37
 3e6:	95 60       	ori	r25, 0x05	; 5
 3e8:	95 bd       	out	0x25, r25	; 37

	OCR0A = fan_speed; //75% voltage Max = 255 
 3ea:	87 bd       	out	0x27, r24	; 39
 3ec:	08 95       	ret

000003ee <timer1_init>:
/** Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescaler 64 to 1 for 1 Mhz and initialise the duty cycle to 
5%**/
void timer1_init(void) {
	
	DDRB |= (1 << DDB1)|(1 << DDB2);
 3ee:	84 b1       	in	r24, 0x04	; 4
 3f0:	86 60       	ori	r24, 0x06	; 6
 3f2:	84 b9       	out	0x04, r24	; 4
	ICR1 = 4999;//19999-8Mhz;// for 16Mhz 4999;
 3f4:	87 e8       	ldi	r24, 0x87	; 135
 3f6:	93 e1       	ldi	r25, 0x13	; 19
 3f8:	90 93 87 00 	sts	0x0087, r25
 3fc:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
 400:	10 92 85 00 	sts	0x0085, r1
 404:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1<<WGM11);
 408:	e0 e8       	ldi	r30, 0x80	; 128
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	82 6a       	ori	r24, 0xA2	; 162
 410:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
 412:	e1 e8       	ldi	r30, 0x81	; 129
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8b 61       	ori	r24, 0x1B	; 27
 41a:	80 83       	st	Z, r24

	
	OCR1A = 650; //Fan Rotate 210-650
 41c:	8a e8       	ldi	r24, 0x8A	; 138
 41e:	92 e0       	ldi	r25, 0x02	; 2
 420:	90 93 89 00 	sts	0x0089, r25
 424:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 200; //Release 200-400
 428:	88 ec       	ldi	r24, 0xC8	; 200
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 8b 00 	sts	0x008B, r25
 430:	80 93 8a 00 	sts	0x008A, r24
 434:	08 95       	ret

00000436 <__divmodsi4>:
 436:	05 2e       	mov	r0, r21
 438:	97 fb       	bst	r25, 7
 43a:	16 f4       	brtc	.+4      	; 0x440 <__divmodsi4+0xa>
 43c:	00 94       	com	r0
 43e:	07 d0       	rcall	.+14     	; 0x44e <__divmodsi4_neg1>
 440:	57 fd       	sbrc	r21, 7
 442:	0d d0       	rcall	.+26     	; 0x45e <__divmodsi4_neg2>
 444:	0e 94 37 02 	call	0x46e	; 0x46e <__udivmodsi4>
 448:	07 fc       	sbrc	r0, 7
 44a:	09 d0       	rcall	.+18     	; 0x45e <__divmodsi4_neg2>
 44c:	7e f4       	brtc	.+30     	; 0x46c <__divmodsi4_exit>

0000044e <__divmodsi4_neg1>:
 44e:	90 95       	com	r25
 450:	80 95       	com	r24
 452:	70 95       	com	r23
 454:	61 95       	neg	r22
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	08 95       	ret

0000045e <__divmodsi4_neg2>:
 45e:	50 95       	com	r21
 460:	40 95       	com	r20
 462:	30 95       	com	r19
 464:	21 95       	neg	r18
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	4f 4f       	sbci	r20, 0xFF	; 255
 46a:	5f 4f       	sbci	r21, 0xFF	; 255

0000046c <__divmodsi4_exit>:
 46c:	08 95       	ret

0000046e <__udivmodsi4>:
 46e:	a1 e2       	ldi	r26, 0x21	; 33
 470:	1a 2e       	mov	r1, r26
 472:	aa 1b       	sub	r26, r26
 474:	bb 1b       	sub	r27, r27
 476:	fd 01       	movw	r30, r26
 478:	0d c0       	rjmp	.+26     	; 0x494 <__udivmodsi4_ep>

0000047a <__udivmodsi4_loop>:
 47a:	aa 1f       	adc	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	ee 1f       	adc	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	a2 17       	cp	r26, r18
 484:	b3 07       	cpc	r27, r19
 486:	e4 07       	cpc	r30, r20
 488:	f5 07       	cpc	r31, r21
 48a:	20 f0       	brcs	.+8      	; 0x494 <__udivmodsi4_ep>
 48c:	a2 1b       	sub	r26, r18
 48e:	b3 0b       	sbc	r27, r19
 490:	e4 0b       	sbc	r30, r20
 492:	f5 0b       	sbc	r31, r21

00000494 <__udivmodsi4_ep>:
 494:	66 1f       	adc	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	88 1f       	adc	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	1a 94       	dec	r1
 49e:	69 f7       	brne	.-38     	; 0x47a <__udivmodsi4_loop>
 4a0:	60 95       	com	r22
 4a2:	70 95       	com	r23
 4a4:	80 95       	com	r24
 4a6:	90 95       	com	r25
 4a8:	9b 01       	movw	r18, r22
 4aa:	ac 01       	movw	r20, r24
 4ac:	bd 01       	movw	r22, r26
 4ae:	cf 01       	movw	r24, r30
 4b0:	08 95       	ret

000004b2 <puts>:
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	8c 01       	movw	r16, r24
 4bc:	e0 91 2b 02 	lds	r30, 0x022B
 4c0:	f0 91 2c 02 	lds	r31, 0x022C
 4c4:	83 81       	ldd	r24, Z+3	; 0x03
 4c6:	81 ff       	sbrs	r24, 1
 4c8:	1b c0       	rjmp	.+54     	; 0x500 <puts+0x4e>
 4ca:	c0 e0       	ldi	r28, 0x00	; 0
 4cc:	d0 e0       	ldi	r29, 0x00	; 0
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <puts+0x28>
 4d0:	09 95       	icall
 4d2:	89 2b       	or	r24, r25
 4d4:	11 f0       	breq	.+4      	; 0x4da <puts+0x28>
 4d6:	cf ef       	ldi	r28, 0xFF	; 255
 4d8:	df ef       	ldi	r29, 0xFF	; 255
 4da:	f8 01       	movw	r30, r16
 4dc:	81 91       	ld	r24, Z+
 4de:	8f 01       	movw	r16, r30
 4e0:	60 91 2b 02 	lds	r22, 0x022B
 4e4:	70 91 2c 02 	lds	r23, 0x022C
 4e8:	db 01       	movw	r26, r22
 4ea:	18 96       	adiw	r26, 0x08	; 8
 4ec:	ed 91       	ld	r30, X+
 4ee:	fc 91       	ld	r31, X
 4f0:	19 97       	sbiw	r26, 0x09	; 9
 4f2:	81 11       	cpse	r24, r1
 4f4:	ed cf       	rjmp	.-38     	; 0x4d0 <puts+0x1e>
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	09 95       	icall
 4fa:	89 2b       	or	r24, r25
 4fc:	09 f4       	brne	.+2      	; 0x500 <puts+0x4e>
 4fe:	02 c0       	rjmp	.+4      	; 0x504 <puts+0x52>
 500:	cf ef       	ldi	r28, 0xFF	; 255
 502:	df ef       	ldi	r29, 0xFF	; 255
 504:	ce 01       	movw	r24, r28
 506:	df 91       	pop	r29
 508:	cf 91       	pop	r28
 50a:	1f 91       	pop	r17
 50c:	0f 91       	pop	r16
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
