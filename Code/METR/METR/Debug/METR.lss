
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000898  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000092f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007bc  00000000  00000000  00000a46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b9  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058e  00000000  00000000  000015bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a0  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021d  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002065  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	if (ch > 0x03) {
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
		return ADC;
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	}        
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	return(ADC);
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
}
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1B = 1050;
			}
			watch_delay(3000000);
			side ^= 1;
		} 
		adOne = ADC_Run(0x00);
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
		adTwo = ADC_Run(0x01);
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
		//ad's below 5 (0.02mV) either side of the beacons
		if (adOne < 5 && adTwo < 5) {
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			OCR0A = 5;
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			OCR1A = 0; //(push)
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			watch_delay(3000000);
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			OCR1A = 0; //(pull)
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
			if (side == 0) {
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
				OCR1B = 1020;
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
				watch_delay(3000000);
  78:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <fan_run>:
  80:	d1 2c       	mov	r13, r1
  82:	c8 e8       	ldi	r28, 0x88	; 136
			}
			OCR0A = 171;
  84:	d0 e0       	ldi	r29, 0x00	; 0
  86:	0f 2e       	mov	r0, r31
			while (1) {
				adVolts = ADC_Run(0x02);
  88:	f5 ec       	ldi	r31, 0xC5	; 197
  8a:	ef 2e       	mov	r14, r31
  8c:	f1 2c       	mov	r15, r1
				if (adVolts < 5) {
  8e:	f0 2d       	mov	r31, r0
  90:	0a e8       	ldi	r16, 0x8A	; 138
					OCR0A = 5;
  92:	12 e0       	ldi	r17, 0x02	; 2
  94:	cc 24       	eor	r12, r12
		}
		
		break;
	}
	return;
}
  96:	c3 94       	inc	r12
  98:	0e 94 6e 00 	call	0xdc	; 0xdc <timer0_init>
  9c:	60 e8       	ldi	r22, 0x80	; 128
			////OCR1A = i;
			//OCR1B = i;
			//watch_delay(3000000);
		//}
		OCR0A = 100;
		OCR1B = 197;	
  9e:	7d e8       	ldi	r23, 0x8D	; 141
		OCR1A = 200;
  a0:	8b e5       	ldi	r24, 0x5B	; 91
  a2:	90 e0       	ldi	r25, 0x00	; 0
		watch_delay(3000000);
  a4:	0e 94 9d 00 	call	0x13a	; 0x13a <watch_delay>
  a8:	17 bc       	out	0x27, r1	; 39
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	14 bc       	out	0x24, r1	; 36
  ae:	85 b5       	in	r24, 0x25	; 37
		OCR1B = 650;
  b0:	15 bc       	out	0x25, r1	; 37
  b2:	d1 10       	cpse	r13, r1
  b4:	03 c0       	rjmp	.+6      	; 0xbc <fan_run+0x3c>
		OCR1A = 500;
  b6:	19 83       	std	Y+1, r17	; 0x01
  b8:	08 83       	st	Y, r16
		OCR0A = 0;
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <fan_run+0x40>
		watch_delay(3000000);
  bc:	f9 82       	std	Y+1, r15	; 0x01
  be:	e8 82       	st	Y, r14
  c0:	60 ec       	ldi	r22, 0xC0	; 192
  c2:	76 ec       	ldi	r23, 0xC6	; 198
  c4:	8d e2       	ldi	r24, 0x2D	; 45
  c6:	90 e0       	ldi	r25, 0x00	; 0
		if (i > 2) {
  c8:	0e 94 9d 00 	call	0x13a	; 0x13a <watch_delay>
  cc:	dc 24       	eor	r13, r12
  ce:	e4 cf       	rjmp	.-56     	; 0x98 <fan_run+0x18>

000000d0 <main>:
  d0:	1a b8       	out	0x0a, r1	; 10
  d2:	14 b8       	out	0x04, r1	; 4
  d4:	0e 94 79 00 	call	0xf2	; 0xf2 <timer1_init>
	DDRD = 0x00;
	DDRB = 0x00;
	//ADC_Throw();
	//timer0_init(); //move to mode operation part for final
	timer1_init();
	fan_run();
  d8:	0e 94 40 00 	call	0x80	; 0x80 <fan_run>

000000dc <timer0_init>:
#include "Timer0.h"
 /** Set up Timer0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescaler 1024 (16Mhz)  64 (1MHz)**/
void timer0_init(void) {

	DDRD |= (1 << DDD6);
  dc:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
  de:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	83 68       	ori	r24, 0x83	; 131
  e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02)|(1<<CS00); //61.3Hz
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	85 bd       	out	0x25, r24	; 37

	OCR0A = 191;//178;//191; //75% voltage Max = 255 
  ec:	8f eb       	ldi	r24, 0xBF	; 191
  ee:	87 bd       	out	0x27, r24	; 39
  f0:	08 95       	ret

000000f2 <timer1_init>:
/** Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescaler 64 to 1 for 1 Mhz and initialise the duty cycle to 
5%**/
void timer1_init(void) {
	
	DDRB |= (1 << DDB1)|(1 << DDB2);
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	86 60       	ori	r24, 0x06	; 6
  f6:	84 b9       	out	0x04, r24	; 4
	ICR1 = 4999;//19999-8Mhz;// for 16Mhz 4999;
  f8:	87 e8       	ldi	r24, 0x87	; 135
  fa:	93 e1       	ldi	r25, 0x13	; 19
  fc:	90 93 87 00 	sts	0x0087, r25
 100:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
 104:	10 92 85 00 	sts	0x0085, r1
 108:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1<<WGM11);
 10c:	e0 e8       	ldi	r30, 0x80	; 128
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	82 6a       	ori	r24, 0xA2	; 162
 114:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
 116:	e1 e8       	ldi	r30, 0x81	; 129
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8b 61       	ori	r24, 0x1B	; 27
 11e:	80 83       	st	Z, r24

	
	OCR1A = 197; //Release 200-400
 120:	85 ec       	ldi	r24, 0xC5	; 197
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	90 93 89 00 	sts	0x0089, r25
 128:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 200; //Fan Rotate 197-649
 12c:	88 ec       	ldi	r24, 0xC8	; 200
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 8b 00 	sts	0x008B, r25
 134:	80 93 8a 00 	sts	0x008A, r24
 138:	08 95       	ret

0000013a <watch_delay>:

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 13a:	61 15       	cp	r22, r1
 13c:	71 05       	cpc	r23, r1
 13e:	81 05       	cpc	r24, r1
 140:	91 05       	cpc	r25, r1
 142:	31 f0       	breq	.+12     	; 0x150 <watch_delay+0x16>
}

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
 144:	dc 01       	movw	r26, r24
 146:	cb 01       	movw	r24, r22
	while(ticks) {
		ticks--;
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	a1 09       	sbc	r26, r1
 14c:	b1 09       	sbc	r27, r1

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 14e:	e1 f7       	brne	.-8      	; 0x148 <watch_delay+0xe>
 150:	08 95       	ret

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
