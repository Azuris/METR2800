
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000913  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000942  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ed  00000000  00000000  00000a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a8  00000000  00000000  00001117  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000560  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a0  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000140  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	if (ch > 0x03) {
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
		return ADC;
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	}        
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	return(ADC);
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
}
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	uint16_t adVolts;
	
		while(1) {
			adVolts = ADC_Run(0x00);
			// 1000 ADC
			if (adVolts < 205) {
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR0A = 0;	//send signal to block fan from receiving power
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1A = 2000;
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				watch_delay(3000000);
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1A = 1300;
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				watch_delay(3000000);
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1A = 2000;
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				watch_delay(3000000);
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
				OCR1A = 1300;
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
				OCR1B = 789;
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
				watch_delay(3000000);
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <test_run>:
  80:	c4 e8       	ldi	r28, 0x84	; 132
  82:	d3 e0       	ldi	r29, 0x03	; 3
				OCR0A = 128;
  84:	08 e8       	ldi	r16, 0x88	; 136
  86:	10 e0       	ldi	r17, 0x00	; 0
	uint32_t i;
	uint8_t side;
	while(1) {
		//OCR1A = 1300;
		
		for (int i=900;i<2900;i+=10){
  88:	0f 2e       	mov	r0, r31
  8a:	f4 e8       	ldi	r31, 0x84	; 132
  8c:	ef 2e       	mov	r14, r31
  8e:	f3 e0       	ldi	r31, 0x03	; 3
  90:	ff 2e       	mov	r15, r31
  92:	f0 2d       	mov	r31, r0
			OCR1A = i;
  94:	f8 01       	movw	r30, r16
  96:	d1 83       	std	Z+1, r29	; 0x01
  98:	c0 83       	st	Z, r28
			watch_delay(94000);
  9a:	60 e3       	ldi	r22, 0x30	; 48
  9c:	7f e6       	ldi	r23, 0x6F	; 111
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 8f 00 	call	0x11e	; 0x11e <watch_delay>
	uint32_t i;
	uint8_t side;
	while(1) {
		//OCR1A = 1300;
		
		for (int i=900;i<2900;i+=10){
  a6:	2a 96       	adiw	r28, 0x0a	; 10
  a8:	c4 35       	cpi	r28, 0x54	; 84
  aa:	fb e0       	ldi	r31, 0x0B	; 11
  ac:	df 07       	cpc	r29, r31
  ae:	94 f3       	brlt	.-28     	; 0x94 <test_run+0x14>
  b0:	e7 01       	movw	r28, r14
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <test_run+0x14>

000000b4 <main>:
void test_run(void);
void fan_run(void);

int main(void) {

	DDRD = 0x00;
  b4:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x00;
  b6:	14 b8       	out	0x04, r1	; 4
	//ADC_Throw();
	timer0_init(); //move to mode operation part for final
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <timer0_init>
	timer1_init();
  bc:	0e 94 6d 00 	call	0xda	; 0xda <timer1_init>
	//fan_run();
	test_run();
  c0:	0e 94 40 00 	call	0x80	; 0x80 <test_run>

000000c4 <timer0_init>:
#include "Timer0.h"
 /** Set up Timer0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescaler 1024 (16Mhz)  64 (1MHz)**/
void timer0_init(void) {

	DDRD |= (1 << DDD6);
  c4:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
  c6:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << COM0A1)|(1<<WGM01)|(1<<WGM00);
  c8:	84 b5       	in	r24, 0x24	; 36
  ca:	83 68       	ori	r24, 0x83	; 131
  cc:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01)|(1<<CS00); //61.3Hz
  ce:	85 b5       	in	r24, 0x25	; 37
  d0:	83 60       	ori	r24, 0x03	; 3
  d2:	85 bd       	out	0x25, r24	; 37

	OCR0A = 178;//191; //75% voltage Max = 255 
  d4:	82 eb       	ldi	r24, 0xB2	; 178
  d6:	87 bd       	out	0x27, r24	; 39
  d8:	08 95       	ret

000000da <timer1_init>:
/** Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescaler 64 to 1 for 1 Mhz and initialise the duty cycle to 
5%**/
void timer1_init(void) {
	
	DDRB |= (1 << DDB1)|(1 << DDB2);
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	86 60       	ori	r24, 0x06	; 6
  de:	84 b9       	out	0x04, r24	; 4
	ICR1 = 19999;//20000 for 16Mhz;
  e0:	8f e1       	ldi	r24, 0x1F	; 31
  e2:	9e e4       	ldi	r25, 0x4E	; 78
  e4:	90 93 87 00 	sts	0x0087, r25
  e8:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
  ec:	10 92 85 00 	sts	0x0085, r1
  f0:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1<<WGM12)|(1<<WGM11);
  f4:	e0 e8       	ldi	r30, 0x80	; 128
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8a 6a       	ori	r24, 0xAA	; 170
  fc:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)||(1<<CS10);
  fe:	e1 e8       	ldi	r30, 0x81	; 129
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	81 60       	ori	r24, 0x01	; 1
 106:	80 83       	st	Z, r24

	
	OCR1A = 999; //Release
 108:	87 ee       	ldi	r24, 0xE7	; 231
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	90 93 89 00 	sts	0x0089, r25
 110:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 999; //Fan Rotate
 114:	90 93 8b 00 	sts	0x008B, r25
 118:	80 93 8a 00 	sts	0x008A, r24
 11c:	08 95       	ret

0000011e <watch_delay>:

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 11e:	61 15       	cp	r22, r1
 120:	71 05       	cpc	r23, r1
 122:	81 05       	cpc	r24, r1
 124:	91 05       	cpc	r25, r1
 126:	31 f0       	breq	.+12     	; 0x134 <watch_delay+0x16>
}

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
 128:	dc 01       	movw	r26, r24
 12a:	cb 01       	movw	r24, r22
	while(ticks) {
		ticks--;
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	a1 09       	sbc	r26, r1
 130:	b1 09       	sbc	r27, r1

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 132:	e1 f7       	brne	.-8      	; 0x12c <watch_delay+0xe>
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
