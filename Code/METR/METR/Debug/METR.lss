
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000029e  00000312  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000a77  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006af  00000000  00000000  00000b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a8  00000000  00000000  0000123d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055f  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000194  00000000  00000000  00001c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ef  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  78:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitADC>:
#include "AD_Convert.h"

void InitADC(void)
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
  8c:	08 95       	ret

0000008e <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x03;
	ADMUX|=ch;         
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x03;
  94:	83 70       	andi	r24, 0x03	; 3
	ADMUX|=ch;         
  96:	98 2b       	or	r25, r24
  98:	90 83       	st	Z, r25
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  a4:	80 81       	ld	r24, Z
  a6:	84 ff       	sbrs	r24, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <ReadADC+0x16>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	80 83       	st	Z, r24

	return(ADC);
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
}
  bc:	82 2f       	mov	r24, r18
  be:	93 2f       	mov	r25, r19
  c0:	08 95       	ret

000000c2 <ADC_Run>:

uint16_t ADC_Run(uint8_t channel)
{
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24
	uint16_t adc_result;

	//Initialize ADC
	InitADC();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <InitADC>

	adc_result=ReadADC(channel);           // Read Analog value from channel-4
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <ReadADC>
	
	return adc_result;
}
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <fan_run>:
		i++;**/
	}
}

void fan_run(void) {
	OCR0A = 191;
  d4:	8f eb       	ldi	r24, 0xBF	; 191
  d6:	87 bd       	out	0x27, r24	; 39
	watch_delay(3000000);
  d8:	60 ec       	ldi	r22, 0xC0	; 192
  da:	76 ec       	ldi	r23, 0xC6	; 198
  dc:	8d e2       	ldi	r24, 0x2D	; 45
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
	OCR0A = 0;
  e4:	17 bc       	out	0x27, r1	; 39
  e6:	08 95       	ret

000000e8 <main>:
void test_run(void);
void fan_run(void);

int main(void) {

	DDRD = 0x00;
  e8:	1a b8       	out	0x0a, r1	; 10
	DDRD ^= (1 << DDD7);
  ea:	8a b1       	in	r24, 0x0a	; 10
  ec:	80 58       	subi	r24, 0x80	; 128
  ee:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;
  f0:	14 b8       	out	0x04, r1	; 4
	//ADC_Throw();
	timer0_init(); //move to mode operation part for final
  f2:	0e 94 13 01 	call	0x226	; 0x226 <timer0_init>
	timer1_init();
  f6:	0e 94 1d 01 	call	0x23a	; 0x23a <timer1_init>
	fan_run();
  fa:	0e 94 6a 00 	call	0xd4	; 0xd4 <fan_run>
	//test_run();
	while(1) {
		if (PIND & (1 << PIND2)) {
  fe:	4a 9b       	sbis	0x09, 2	; 9
 100:	fe cf       	rjmp	.-4      	; 0xfe <main+0x16>
			
			//watch_delay(6000000);
			
			//timer0_init();
			
			if (PIND == 0x04) {
 102:	89 b1       	in	r24, 0x09	; 9
 104:	84 30       	cpi	r24, 0x04	; 4
 106:	11 f4       	brne	.+4      	; 0x10c <main+0x24>
				Mode_One();
 108:	0e 94 96 00 	call	0x12c	; 0x12c <Mode_One>
			}
			if (PIND == 0x05) {
 10c:	89 b1       	in	r24, 0x09	; 9
 10e:	85 30       	cpi	r24, 0x05	; 5
 110:	11 f4       	brne	.+4      	; 0x116 <main+0x2e>
				Mode_Two();
 112:	0e 94 ca 00 	call	0x194	; 0x194 <Mode_Two>
			}
			if (PIND == 0x06) {
 116:	89 b1       	in	r24, 0x09	; 9
 118:	86 30       	cpi	r24, 0x06	; 6
 11a:	11 f4       	brne	.+4      	; 0x120 <main+0x38>
				Mode_Three();
 11c:	0e 94 0e 01 	call	0x21c	; 0x21c <Mode_Three>
			}
			if (PIND == 0x07) {
 120:	89 b1       	in	r24, 0x09	; 9
 122:	87 30       	cpi	r24, 0x07	; 7
 124:	61 f7       	brne	.-40     	; 0xfe <main+0x16>
				Mode_Four();
 126:	0e 94 12 01 	call	0x224	; 0x224 <Mode_Four>
 12a:	e9 cf       	rjmp	.-46     	; 0xfe <main+0x16>

0000012c <Mode_One>:
		while(1) {
			adVolts = ADC_Run(0x00);
			// 1000 ADC
			if (adVolts < 205) {
				OCR0A = 0;	//send signal to block fan from receiving power
				OCR1A = 2000;
 12c:	c8 e8       	ldi	r28, 0x88	; 136
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	0f 2e       	mov	r0, r31
 132:	f0 ed       	ldi	r31, 0xD0	; 208
 134:	af 2e       	mov	r10, r31
 136:	f7 e0       	ldi	r31, 0x07	; 7
 138:	bf 2e       	mov	r11, r31
 13a:	f0 2d       	mov	r31, r0
				watch_delay(3000000);
				OCR1A = 1300;
 13c:	0f 2e       	mov	r0, r31
 13e:	f4 e1       	ldi	r31, 0x14	; 20
 140:	cf 2e       	mov	r12, r31
 142:	f5 e0       	ldi	r31, 0x05	; 5
 144:	df 2e       	mov	r13, r31
 146:	f0 2d       	mov	r31, r0
				OCR1B = 789;
 148:	0f 2e       	mov	r0, r31
 14a:	fa e8       	ldi	r31, 0x8A	; 138
 14c:	ef 2e       	mov	r14, r31
 14e:	f1 2c       	mov	r15, r1
 150:	f0 2d       	mov	r31, r0
 152:	05 e1       	ldi	r16, 0x15	; 21
 154:	13 e0       	ldi	r17, 0x03	; 3
				watch_delay(3000000);
				OCR0A = 128;
 156:	68 94       	set
 158:	99 24       	eor	r9, r9
 15a:	97 f8       	bld	r9, 7
void Mode_One() {
	uint16_t adVolts;

	//run stationary single drop
		while(1) {
			adVolts = ADC_Run(0x00);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Run>
			// 1000 ADC
			if (adVolts < 205) {
 162:	8d 3c       	cpi	r24, 0xCD	; 205
 164:	91 05       	cpc	r25, r1
 166:	d0 f7       	brcc	.-12     	; 0x15c <Mode_One+0x30>
				OCR0A = 0;	//send signal to block fan from receiving power
 168:	17 bc       	out	0x27, r1	; 39
				OCR1A = 2000;
 16a:	b9 82       	std	Y+1, r11	; 0x01
 16c:	a8 82       	st	Y, r10
				watch_delay(3000000);
 16e:	60 ec       	ldi	r22, 0xC0	; 192
 170:	76 ec       	ldi	r23, 0xC6	; 198
 172:	8d e2       	ldi	r24, 0x2D	; 45
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
				OCR1A = 1300;
 17a:	d9 82       	std	Y+1, r13	; 0x01
 17c:	c8 82       	st	Y, r12
				OCR1B = 789;
 17e:	f7 01       	movw	r30, r14
 180:	11 83       	std	Z+1, r17	; 0x01
 182:	00 83       	st	Z, r16
				watch_delay(3000000);
 184:	60 ec       	ldi	r22, 0xC0	; 192
 186:	76 ec       	ldi	r23, 0xC6	; 198
 188:	8d e2       	ldi	r24, 0x2D	; 45
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
				OCR0A = 128;
 190:	97 bc       	out	0x27, r9	; 39
 192:	e4 cf       	rjmp	.-56     	; 0x15c <Mode_One+0x30>

00000194 <Mode_Two>:
		while(1) {
			adVolts = ADC_Run(0x00);
			// 1000 ADC
			if (adVolts < 205) {
				OCR0A = 0;	//send signal to block fan from receiving power
				OCR1A = 2000;
 194:	c8 e8       	ldi	r28, 0x88	; 136
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	0f 2e       	mov	r0, r31
 19a:	f0 ed       	ldi	r31, 0xD0	; 208
 19c:	ef 2e       	mov	r14, r31
 19e:	f7 e0       	ldi	r31, 0x07	; 7
 1a0:	ff 2e       	mov	r15, r31
 1a2:	f0 2d       	mov	r31, r0
				watch_delay(3000000);
				OCR1A = 1300;
 1a4:	04 e1       	ldi	r16, 0x14	; 20
 1a6:	15 e0       	ldi	r17, 0x05	; 5
				watch_delay(3000000);
				OCR1A = 2000;
				watch_delay(3000000);
				OCR1A = 1300;
				OCR1B = 789;
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fa e8       	ldi	r31, 0x8A	; 138
 1ac:	af 2e       	mov	r10, r31
 1ae:	b1 2c       	mov	r11, r1
 1b0:	f0 2d       	mov	r31, r0
 1b2:	0f 2e       	mov	r0, r31
 1b4:	f5 e1       	ldi	r31, 0x15	; 21
 1b6:	cf 2e       	mov	r12, r31
 1b8:	f3 e0       	ldi	r31, 0x03	; 3
 1ba:	df 2e       	mov	r13, r31
 1bc:	f0 2d       	mov	r31, r0
				watch_delay(3000000);
				OCR0A = 128;
 1be:	68 94       	set
 1c0:	99 24       	eor	r9, r9
 1c2:	97 f8       	bld	r9, 7

void Mode_Two() {
	uint16_t adVolts;
	
		while(1) {
			adVolts = ADC_Run(0x00);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Run>
			// 1000 ADC
			if (adVolts < 205) {
 1ca:	8d 3c       	cpi	r24, 0xCD	; 205
 1cc:	91 05       	cpc	r25, r1
 1ce:	d0 f7       	brcc	.-12     	; 0x1c4 <Mode_Two+0x30>
				OCR0A = 0;	//send signal to block fan from receiving power
 1d0:	17 bc       	out	0x27, r1	; 39
				OCR1A = 2000;
 1d2:	f9 82       	std	Y+1, r15	; 0x01
 1d4:	e8 82       	st	Y, r14
				watch_delay(3000000);
 1d6:	60 ec       	ldi	r22, 0xC0	; 192
 1d8:	76 ec       	ldi	r23, 0xC6	; 198
 1da:	8d e2       	ldi	r24, 0x2D	; 45
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
				OCR1A = 1300;
 1e2:	19 83       	std	Y+1, r17	; 0x01
 1e4:	08 83       	st	Y, r16
				watch_delay(3000000);
 1e6:	60 ec       	ldi	r22, 0xC0	; 192
 1e8:	76 ec       	ldi	r23, 0xC6	; 198
 1ea:	8d e2       	ldi	r24, 0x2D	; 45
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
				OCR1A = 2000;
 1f2:	f9 82       	std	Y+1, r15	; 0x01
 1f4:	e8 82       	st	Y, r14
				watch_delay(3000000);
 1f6:	60 ec       	ldi	r22, 0xC0	; 192
 1f8:	76 ec       	ldi	r23, 0xC6	; 198
 1fa:	8d e2       	ldi	r24, 0x2D	; 45
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
				OCR1A = 1300;
 202:	19 83       	std	Y+1, r17	; 0x01
 204:	08 83       	st	Y, r16
				OCR1B = 789;
 206:	f5 01       	movw	r30, r10
 208:	d1 82       	std	Z+1, r13	; 0x01
 20a:	c0 82       	st	Z, r12
				watch_delay(3000000);
 20c:	60 ec       	ldi	r22, 0xC0	; 192
 20e:	76 ec       	ldi	r23, 0xC6	; 198
 210:	8d e2       	ldi	r24, 0x2D	; 45
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 41 01 	call	0x282	; 0x282 <watch_delay>
				OCR0A = 128;
 218:	97 bc       	out	0x27, r9	; 39
 21a:	d4 cf       	rjmp	.-88     	; 0x1c4 <Mode_Two+0x30>

0000021c <Mode_Three>:
		}
	return;
}

void Mode_Three() {
	ADC_Run(0x04);
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Run>
 222:	08 95       	ret

00000224 <Mode_Four>:
	return;
}

void Mode_Four() {
 224:	08 95       	ret

00000226 <timer0_init>:
#include "Timer0.h"
 /** Set up Timer0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescaler 1024**/
void timer0_init(void) {

	DDRD |= (1 << DDD6);
 226:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
 228:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << COM0A1)|(1<<WGM00);
 22a:	84 b5       	in	r24, 0x24	; 36
 22c:	81 68       	ori	r24, 0x81	; 129
 22e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);//(1<<CS00);(1<<WGM01)|
 230:	85 b5       	in	r24, 0x25	; 37
 232:	84 60       	ori	r24, 0x04	; 4
 234:	85 bd       	out	0x25, r24	; 37

	OCR0A = 0;//191; //75% voltage Max = 255 
 236:	17 bc       	out	0x27, r1	; 39
 238:	08 95       	ret

0000023a <timer1_init>:
/** Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescaler 64  and initialise the duty cycle to 
5%**/
void timer1_init(void) {
	
	DDRB |= (1 << DDB1)|(1 << DDB2);
 23a:	84 b1       	in	r24, 0x04	; 4
 23c:	86 60       	ori	r24, 0x06	; 6
 23e:	84 b9       	out	0x04, r24	; 4
	ICR1 = 20000;//4999; //39999
 240:	80 e2       	ldi	r24, 0x20	; 32
 242:	9e e4       	ldi	r25, 0x4E	; 78
 244:	90 93 87 00 	sts	0x0087, r25
 248:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
 24c:	10 92 85 00 	sts	0x0085, r1
 250:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);//|(1<<WGM11); 
 254:	e0 e8       	ldi	r30, 0x80	; 128
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 6a       	ori	r24, 0xA0	; 160
 25c:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)|(1 << CS11);//|(1<<CS10);
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	82 61       	ori	r24, 0x12	; 18
 266:	80 83       	st	Z, r24

	
	OCR1A = 2000;
 268:	80 ed       	ldi	r24, 0xD0	; 208
 26a:	97 e0       	ldi	r25, 0x07	; 7
 26c:	90 93 89 00 	sts	0x0089, r25
 270:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 3525;
 274:	85 ec       	ldi	r24, 0xC5	; 197
 276:	9d e0       	ldi	r25, 0x0D	; 13
 278:	90 93 8b 00 	sts	0x008B, r25
 27c:	80 93 8a 00 	sts	0x008A, r24
 280:	08 95       	ret

00000282 <watch_delay>:

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 282:	61 15       	cp	r22, r1
 284:	71 05       	cpc	r23, r1
 286:	81 05       	cpc	r24, r1
 288:	91 05       	cpc	r25, r1
 28a:	31 f0       	breq	.+12     	; 0x298 <watch_delay+0x16>
}

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
 28c:	dc 01       	movw	r26, r24
 28e:	cb 01       	movw	r24, r22
	while(ticks) {
		ticks--;
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	a1 09       	sbc	r26, r1
 294:	b1 09       	sbc	r27, r1

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 296:	e1 f7       	brne	.-8      	; 0x290 <watch_delay+0xe>
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
