
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000144  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000910  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d8  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a1  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000411  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012b  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b2  00000000  00000000  000015cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e4       	ldi	r30, 0x44	; 68
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC>:
#include <avr/io.h>

void InitADC()
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24
}
  b2:	08 95       	ret

000000b4 <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
	ADMUX|=ch;         
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
  ba:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;         
  bc:	98 2b       	or	r25, r24
  be:	90 83       	st	Z, r25
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  ca:	80 81       	ld	r24, Z
  cc:	84 ff       	sbrs	r24, 4
  ce:	fd cf       	rjmp	.-6      	; 0xca <ReadADC+0x16>
	//Clear ADIF by writing one to it
	//Note you may be wondering why we have write one to clear it
	//This is standard way of clearing bits in io as said in datasheets.
	//The code writes '1' but it result in setting bit to '0' !!!

	ADCSRA|=(1<<ADIF);
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 61       	ori	r24, 0x10	; 16
  d8:	80 83       	st	Z, r24

	return(ADC);
  da:	80 91 78 00 	lds	r24, 0x0078
  de:	90 91 79 00 	lds	r25, 0x0079
}
  e2:	08 95       	ret

000000e4 <ADC_Run>:
void ADC_Run()
{
	uint16_t adc_result;

	//Initialize ADC
	InitADC();
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC>

	while(1)
	{
		adc_result=ReadADC(0);           // Read Analog value from channel-0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 5a 00 	call	0xb4	; 0xb4 <ReadADC>
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <ADC_Run+0x4>

000000f0 <main>:
#include <util/delay.h>

int main(void) {
	uint8_t test;
	
	DDRD = 0x00;
  f0:	1a b8       	out	0x0a, r1	; 10
	while(1) {
		if (PIND == 0x04) {
  f2:	89 b1       	in	r24, 0x09	; 9
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	c1 f4       	brne	.+48     	; 0x128 <main+0x38>
			//run stationary single drop
			DDRD |= (1 << DDD6);
  f8:	56 9a       	sbi	0x0a, 6	; 10
			TCCR0A |= 0b10000001;
  fa:	84 b5       	in	r24, 0x24	; 36
  fc:	81 68       	ori	r24, 0x81	; 129
  fe:	84 bd       	out	0x24, r24	; 36
			TCCR0B |= 0b00000101;
 100:	85 b5       	in	r24, 0x25	; 37
 102:	85 60       	ori	r24, 0x05	; 5
 104:	85 bd       	out	0x25, r24	; 37
			
			OCR0A = 0x0A;
 106:	8a e0       	ldi	r24, 0x0A	; 10
 108:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x1e>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x24>
 114:	00 00       	nop
			_delay_ms(100);
			OCR0A = 0x38;
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	87 bd       	out	0x27, r24	; 39
 11a:	87 ea       	ldi	r24, 0xA7	; 167
 11c:	91 e6       	ldi	r25, 0x61	; 97
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x2e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x34>
 124:	00 00       	nop
			_delay_ms(100);
			//require timing for angles
			// freq = (8MHz or 16Mhz)/8*510
			return 0;
 126:	09 c0       	rjmp	.+18     	; 0x13a <main+0x4a>
		}
		if (PIND == 0x05) {
 128:	89 b1       	in	r24, 0x09	; 9
 12a:	85 30       	cpi	r24, 0x05	; 5
 12c:	31 f0       	breq	.+12     	; 0x13a <main+0x4a>
			//run moving single drop
			return 0;
		}
		if (PIND == 0x06) {
 12e:	89 b1       	in	r24, 0x09	; 9
 130:	86 30       	cpi	r24, 0x06	; 6
 132:	19 f0       	breq	.+6      	; 0x13a <main+0x4a>
			//run ballistic run
			return 0;
		}
		if (PIND == 0x07) {
 134:	89 b1       	in	r24, 0x09	; 9
 136:	87 30       	cpi	r24, 0x07	; 7
 138:	e1 f6       	brne	.-72     	; 0xf2 <main+0x2>
			//run moving multiple drop
			return 0;
		}
	}	
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
