
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004b6  0000054a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000115  00800100  00800100  0000054a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000caf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000160  00000000  00000000  00000cde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001272  00000000  00000000  00000e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006cc  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000089f  00000000  00000000  0000277c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002d4  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  000032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000006b4  00000000  00000000  00003651  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  00003d05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_19>
  50:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 eb       	ldi	r30, 0xB6	; 182
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 31       	cpi	r26, 0x15	; 21
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  9e:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC>:
#include "AD_Convert.h"

/* Initialises the Analogue Digital Converter on the Atmega238P with the 
following conditions*/
void InitADC(void) {
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//Prescalar div factor =128
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24
  b2:	08 95       	ret

000000b4 <ReadADC>:
}

/*Read the given AD Converter channel that is between Ch1-4, and waits
for the Conversion complete flag before returning the value.*/
uint16_t ReadADC(uint8_t ch) {
	if (ch > 0x04) {
  b4:	85 30       	cpi	r24, 0x05	; 5
  b6:	28 f0       	brcs	.+10     	; 0xc2 <ReadADC+0xe>
		return ADC;
  b8:	20 91 78 00 	lds	r18, 0x0078
  bc:	30 91 79 00 	lds	r19, 0x0079
  c0:	16 c0       	rjmp	.+44     	; 0xee <ReadADC+0x3a>
	}
	ADMUX |= ch;        
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	90 81       	ld	r25, Z
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  d6:	80 81       	ld	r24, Z
  d8:	84 ff       	sbrs	r24, 4
  da:	fd cf       	rjmp	.-6      	; 0xd6 <ReadADC+0x22>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	80 83       	st	Z, r24

	return(ADC);
  e6:	20 91 78 00 	lds	r18, 0x0078
  ea:	30 91 79 00 	lds	r19, 0x0079
}
  ee:	82 2f       	mov	r24, r18
  f0:	93 2f       	mov	r25, r19
  f2:	08 95       	ret

000000f4 <ADC_Run>:
/* Runs the Analogue Digital converter for a single conversion by 
initialising the registers (to clear any possible corruption 
in the registers) and returns the outputted value by the converter.*/
uint16_t ADC_Run(uint8_t channel) {
  f4:	cf 93       	push	r28
  f6:	c8 2f       	mov	r28, r24
	uint16_t adc_result;

	//Initialize ADC
	InitADC();
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC>

	adc_result=ReadADC(channel);         // Read Analog value from channel-4
  fc:	8c 2f       	mov	r24, r28
  fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <ReadADC>
	
	return adc_result;
}
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <ADC_Throw>:
/* This function runs the AD converter on the Atmega328P for the first time, 
to allow it to stabilise and set up for the AD converter (as suggested by the data 
sheet), and ignores the returned value */
void ADC_Throw(void) {
	//InitADC();
	ADC_Run(0x00);
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Run>
 10c:	08 95       	ret

0000010e <main>:
void fan_run(void);
void test_run2(void);

int main(void) {

	DDRD = 0x00;
 10e:	1a b8       	out	0x0a, r1	; 10
	DDRC = 0x00;
 110:	17 b8       	out	0x07, r1	; 7
	DDRB = 0x00;
 112:	14 b8       	out	0x04, r1	; 4
	ADC_Throw();
 114:	0e 94 83 00 	call	0x106	; 0x106 <ADC_Throw>
	timer1_init();
 118:	0e 94 29 02 	call	0x452	; 0x452 <timer1_init>
	//fan_run();
	//test_run();
	if (PIND & (1<<PIND0)) {
 11c:	48 9b       	sbis	0x09, 0	; 9
 11e:	03 c0       	rjmp	.+6      	; 0x126 <main+0x18>
		Mode_One();	
 120:	0e 94 98 00 	call	0x130	; 0x130 <Mode_One>
 124:	02 c0       	rjmp	.+4      	; 0x12a <main+0x1c>
	} else {
		Mode_Two();
 126:	0e 94 ee 00 	call	0x1dc	; 0x1dc <Mode_Two>
	}
	return 1;
}
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret

00000130 <Mode_One>:
			}
		}
		if (adOne > adTwo) {
			if (side == 0) {
				timer0_off();
				OCR1A = 197;
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
				timer0_init(110);
 134:	8c e8       	ldi	r24, 0x8C	; 140
 136:	0e 94 19 02 	call	0x432	; 0x432 <timer0_init>
				side ^= 1;
			} else {
				OCR0A = 110;
			}	
		}
		if (adTwo > adOne) {
 13a:	60 ec       	ldi	r22, 0xC0	; 192
 13c:	76 ec       	ldi	r23, 0xC6	; 198
 13e:	8d e2       	ldi	r24, 0x2D	; 45
		if (adOne > adTwo) {
			if (side == 0) {
				timer0_off();
				OCR1A = 197;
				timer0_init(110);
				side ^= 1;
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			} else {
				OCR0A = 110;
 146:	80 e0       	ldi	r24, 0x00	; 0
			}	
		}
		if (adTwo > adOne) {
 148:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Run>
 14c:	84 3a       	cpi	r24, 0xA4	; 164
 14e:	91 40       	sbci	r25, 0x01	; 1
			if (side == 1) {
 150:	d8 f5       	brcc	.+118    	; 0x1c8 <Mode_One+0x98>
 152:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
				timer0_off();
 156:	ca e8       	ldi	r28, 0x8A	; 138
 158:	d0 e0       	ldi	r29, 0x00	; 0
				OCR1A = 650;
 15a:	8e e5       	ldi	r24, 0x5E	; 94
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	99 83       	std	Y+1, r25	; 0x01
				timer0_init(110);
 160:	88 83       	st	Y, r24
 162:	60 e6       	ldi	r22, 0x60	; 96
 164:	73 ee       	ldi	r23, 0xE3	; 227
				side ^= 1;
 166:	86 e1       	ldi	r24, 0x16	; 22
 168:	90 e0       	ldi	r25, 0x00	; 0
			} else {
				OCR0A = 110;
 16a:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
 16e:	88 ec       	ldi	r24, 0xC8	; 200
			}
		}		
	}
}
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	99 83       	std	Y+1, r25	; 0x01
 174:	88 83       	st	Y, r24
 176:	85 ec       	ldi	r24, 0xC5	; 197
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 89 00 	sts	0x0089, r25
 17e:	80 93 88 00 	sts	0x0088, r24
 182:	60 e8       	ldi	r22, 0x80	; 128
 184:	74 e8       	ldi	r23, 0x84	; 132
 186:	8e e1       	ldi	r24, 0x1E	; 30
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			OCR1B = 350; //(push)
			watch_delay(1500000);
			OCR1B = 200; //(pull)
			OCR1A = 197;
			watch_delay(2000000);
			timer0_init(100);
 18e:	84 e6       	ldi	r24, 0x64	; 100
 190:	0e 94 19 02 	call	0x432	; 0x432 <timer0_init>
			timer0_off();
 194:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
			watch_delay(1500000);
 198:	60 e6       	ldi	r22, 0x60	; 96
 19a:	73 ee       	ldi	r23, 0xE3	; 227
 19c:	86 e1       	ldi	r24, 0x16	; 22
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			timer0_init(140);
 1a4:	8c e8       	ldi	r24, 0x8C	; 140
 1a6:	0e 94 19 02 	call	0x432	; 0x432 <timer0_init>
			while (1) {
				adVolts = ADC_Run(0x03);
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Run>
				if (adVolts < 322) {
 1b0:	82 34       	cpi	r24, 0x42	; 66
 1b2:	91 40       	sbci	r25, 0x01	; 1
 1b4:	d0 f7       	brcc	.-12     	; 0x1aa <Mode_One+0x7a>
					timer0_off();
 1b6:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
					OCR1A = 650;
 1ba:	8a e8       	ldi	r24, 0x8A	; 138
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	90 93 89 00 	sts	0x0089, r25
 1c2:	80 93 88 00 	sts	0x0088, r24
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <Mode_One+0xa6>
					return;
				}
			}
		}
		adOne = ADC_Run(0x00);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Run>
	
	timer0_init(140);
	watch_delay(3000000);
	adOne = ADC_Run(0x00);
	while(1) {
		if ((adOne < 420)) {
 1ce:	84 3a       	cpi	r24, 0xA4	; 164
 1d0:	91 40       	sbci	r25, 0x01	; 1
 1d2:	d0 f7       	brcc	.-12     	; 0x1c8 <Mode_One+0x98>
 1d4:	be cf       	rjmp	.-132    	; 0x152 <Mode_One+0x22>
			}
		}
		adOne = ADC_Run(0x00);
	}
	return;
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <Mode_Two>:

void Mode_Two() {
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
	uint16_t adVolts;
	uint16_t adOne;
	
	timer0_init(140);
 1e0:	8c e8       	ldi	r24, 0x8C	; 140
 1e2:	0e 94 19 02 	call	0x432	; 0x432 <timer0_init>
	watch_delay(12000000);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	7b e1       	ldi	r23, 0x1B	; 27
 1ea:	87 eb       	ldi	r24, 0xB7	; 183
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
	timer0_off();
 1f2:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
	watch_delay(3000000);
 1f6:	60 ec       	ldi	r22, 0xC0	; 192
 1f8:	76 ec       	ldi	r23, 0xC6	; 198
 1fa:	8d e2       	ldi	r24, 0x2D	; 45
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
	while(1) {
		adOne = ADC_Run(0x00);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Run>
		if ((adOne < 480)) {
 208:	80 3e       	cpi	r24, 0xE0	; 224
 20a:	91 40       	sbci	r25, 0x01	; 1
 20c:	d0 f7       	brcc	.-12     	; 0x202 <Mode_Two+0x26>
			timer0_off();
 20e:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
			OCR1B = 350; //(push)
 212:	ca e8       	ldi	r28, 0x8A	; 138
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	8e e5       	ldi	r24, 0x5E	; 94
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	99 83       	std	Y+1, r25	; 0x01
 21c:	88 83       	st	Y, r24
			watch_delay(1500000);
 21e:	60 e6       	ldi	r22, 0x60	; 96
 220:	73 ee       	ldi	r23, 0xE3	; 227
 222:	86 e1       	ldi	r24, 0x16	; 22
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			OCR1B = 200; //(pull)
 22a:	88 ec       	ldi	r24, 0xC8	; 200
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	99 83       	std	Y+1, r25	; 0x01
 230:	88 83       	st	Y, r24
			watch_delay(2000000);
 232:	60 e8       	ldi	r22, 0x80	; 128
 234:	74 e8       	ldi	r23, 0x84	; 132
 236:	8e e1       	ldi	r24, 0x1E	; 30
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			OCR1A = 210;
 23e:	82 ed       	ldi	r24, 0xD2	; 210
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	90 93 89 00 	sts	0x0089, r25
 246:	80 93 88 00 	sts	0x0088, r24
			watch_delay(2000000);
 24a:	60 e8       	ldi	r22, 0x80	; 128
 24c:	74 e8       	ldi	r23, 0x84	; 132
 24e:	8e e1       	ldi	r24, 0x1E	; 30
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			timer0_init(70);
 256:	86 e4       	ldi	r24, 0x46	; 70
 258:	0e 94 19 02 	call	0x432	; 0x432 <timer0_init>
			timer0_off();
 25c:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
			watch_delay(1500000);
 260:	60 e6       	ldi	r22, 0x60	; 96
 262:	73 ee       	ldi	r23, 0xE3	; 227
 264:	86 e1       	ldi	r24, 0x16	; 22
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 4d 02 	call	0x49a	; 0x49a <watch_delay>
			timer0_init(140);
 26c:	8c e8       	ldi	r24, 0x8C	; 140
 26e:	0e 94 19 02 	call	0x432	; 0x432 <timer0_init>
			while (1) {
				adVolts = ADC_Run(0x03);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 7a 00 	call	0xf4	; 0xf4 <ADC_Run>
				if (adVolts < 322) {
 278:	82 34       	cpi	r24, 0x42	; 66
 27a:	91 40       	sbci	r25, 0x01	; 1
 27c:	d0 f7       	brcc	.-12     	; 0x272 <Mode_Two+0x96>
					timer0_off();
 27e:	0e 94 23 02 	call	0x446	; 0x446 <timer0_off>
					OCR1A = 650;
 282:	8a e8       	ldi	r24, 0x8A	; 138
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	90 93 89 00 	sts	0x0089, r25
 28a:	80 93 88 00 	sts	0x0088, r24
					return;
				}
			}
		}
	}
}
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <uart_put_char>:
	}
#endif
}

#ifdef AVR
static int uart_put_char(char c, FILE* stream) {
 294:	cf 93       	push	r28
 296:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
 298:	8a 30       	cpi	r24, 0x0A	; 10
 29a:	19 f4       	brne	.+6      	; 0x2a2 <uart_put_char+0xe>
		uart_put_char('\r', stream);
 29c:	8d e0       	ldi	r24, 0x0D	; 13
 29e:	0e 94 4a 01 	call	0x294	; 0x294 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
 2a2:	2f b7       	in	r18, 0x3f	; 63
 2a4:	20 78       	andi	r18, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <uart_put_char+0x18>
		if(!interrupts_enabled) {
 2a8:	22 23       	and	r18, r18
 2aa:	29 f1       	breq	.+74     	; 0x2f6 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
 2ac:	90 91 02 01 	lds	r25, 0x0102
 2b0:	9f 3f       	cpi	r25, 0xFF	; 255
 2b2:	d1 f3       	breq	.-12     	; 0x2a8 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
 2b4:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
 2b6:	80 91 01 01 	lds	r24, 0x0101
 2ba:	e8 2f       	mov	r30, r24
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ed 5f       	subi	r30, 0xFD	; 253
 2c0:	fe 4f       	sbci	r31, 0xFE	; 254
 2c2:	c0 83       	st	Z, r28
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 01 01 	sts	0x0101, r24
	bytes_in_out_buffer++;
 2ca:	80 91 02 01 	lds	r24, 0x0102
 2ce:	8f 5f       	subi	r24, 0xFF	; 255
 2d0:	80 93 02 01 	sts	0x0102, r24
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
 2d4:	80 91 01 01 	lds	r24, 0x0101
 2d8:	8f 3f       	cpi	r24, 0xFF	; 255
 2da:	11 f4       	brne	.+4      	; 0x2e0 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
 2dc:	10 92 01 01 	sts	0x0101, r1
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
 2e0:	e1 ec       	ldi	r30, 0xC1	; 193
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	80 83       	st	Z, r24
	if(interrupts_enabled) {
 2ea:	22 23       	and	r18, r18
 2ec:	39 f0       	breq	.+14     	; 0x2fc <uart_put_char+0x68>
		sei();
 2ee:	78 94       	sei
	}
	return 0;
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <uart_put_char+0x6c>
	 * disabled) */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
}
 300:	82 2f       	mov	r24, r18
 302:	93 2f       	mov	r25, r19
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <__vector_19>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART_UDRE_vect) 
{
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	8f 93       	push	r24
 316:	9f 93       	push	r25
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
 31c:	80 91 02 01 	lds	r24, 0x0102
 320:	88 23       	and	r24, r24
 322:	29 f1       	breq	.+74     	; 0x36e <__vector_19+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
 324:	80 91 01 01 	lds	r24, 0x0101
 328:	20 91 02 01 	lds	r18, 0x0102
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	82 1b       	sub	r24, r18
 330:	91 09       	sbc	r25, r1
 332:	5a f4       	brpl	.+22     	; 0x34a <__vector_19+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
 334:	e0 91 01 01 	lds	r30, 0x0101
 338:	80 91 02 01 	lds	r24, 0x0102
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	e8 1b       	sub	r30, r24
 340:	f1 09       	sbc	r31, r1
 342:	ee 5f       	subi	r30, 0xFE	; 254
 344:	fd 4f       	sbci	r31, 0xFD	; 253
 346:	80 81       	ld	r24, Z
 348:	0a c0       	rjmp	.+20     	; 0x35e <__vector_19+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
 34a:	e0 91 01 01 	lds	r30, 0x0101
 34e:	80 91 02 01 	lds	r24, 0x0102
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	e8 1b       	sub	r30, r24
 356:	f1 09       	sbc	r31, r1
 358:	ed 5f       	subi	r30, 0xFD	; 253
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	80 81       	ld	r24, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
 35e:	90 91 02 01 	lds	r25, 0x0102
 362:	91 50       	subi	r25, 0x01	; 1
 364:	90 93 02 01 	sts	0x0102, r25
		
		/* Output the character via the UART */
		UDR0 = c;
 368:	80 93 c6 00 	sts	0x00C6, r24
 36c:	05 c0       	rjmp	.+10     	; 0x378 <__vector_19+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
 36e:	e1 ec       	ldi	r30, 0xC1	; 193
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	8f 7d       	andi	r24, 0xDF	; 223
 376:	80 83       	st	Z, r24
	}
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART_TX_vect) 
{
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	cf 93       	push	r28
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	}
#endif
	
	/* Read the character */
	char c;
	c = UDR0;
 3b0:	c0 91 c6 00 	lds	r28, 0x00C6
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
 3b4:	80 91 00 01 	lds	r24, 0x0100
 3b8:	88 23       	and	r24, r24
 3ba:	49 f0       	breq	.+18     	; 0x3ce <__vector_20+0x42>
 3bc:	80 91 02 01 	lds	r24, 0x0102
 3c0:	8f 3f       	cpi	r24, 0xFF	; 255
 3c2:	29 f0       	breq	.+10     	; 0x3ce <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	8c 2f       	mov	r24, r28
 3ca:	0e 94 4a 01 	call	0x294	; 0x294 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
 3ce:	80 91 14 02 	lds	r24, 0x0214
 3d2:	80 31       	cpi	r24, 0x10	; 16
 3d4:	20 f0       	brcs	.+8      	; 0x3de <__vector_20+0x52>
		input_overrun = 1;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 13 02 	sts	0x0213, r24
 3dc:	18 c0       	rjmp	.+48     	; 0x40e <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
 3de:	cd 30       	cpi	r28, 0x0D	; 13
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <__vector_20+0x58>
			c = '\n';
 3e2:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
 3e4:	80 91 02 02 	lds	r24, 0x0202
 3e8:	e8 2f       	mov	r30, r24
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ed 5f       	subi	r30, 0xFD	; 253
 3ee:	fd 4f       	sbci	r31, 0xFD	; 253
 3f0:	c0 83       	st	Z, r28
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	80 93 02 02 	sts	0x0202, r24
		bytes_in_input_buffer++;
 3f8:	80 91 14 02 	lds	r24, 0x0214
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	80 93 14 02 	sts	0x0214, r24
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
 402:	80 91 02 02 	lds	r24, 0x0202
 406:	80 31       	cpi	r24, 0x10	; 16
 408:	11 f4       	brne	.+4      	; 0x40e <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
 40a:	10 92 02 02 	sts	0x0202, r1
		}
	}
}
 40e:	ff 91       	pop	r31
 410:	ef 91       	pop	r30
 412:	cf 91       	pop	r28
 414:	bf 91       	pop	r27
 416:	af 91       	pop	r26
 418:	9f 91       	pop	r25
 41a:	8f 91       	pop	r24
 41c:	7f 91       	pop	r23
 41e:	6f 91       	pop	r22
 420:	5f 91       	pop	r21
 422:	4f 91       	pop	r20
 424:	3f 91       	pop	r19
 426:	2f 91       	pop	r18
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <timer0_init>:

 /* Set up Timer 0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescalar 1024 (16Mhz) and duty cycle fan speed, fan_speed.*/
void timer0_init(uint8_t fan_speed) {

	DDRD |= (1 << DDD6);
 432:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
 434:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
 436:	94 b5       	in	r25, 0x24	; 36
 438:	93 68       	ori	r25, 0x83	; 131
 43a:	94 bd       	out	0x24, r25	; 36
	TCCR0B |= (1<<CS02)|(1<<CS00); //61.3Hz
 43c:	95 b5       	in	r25, 0x25	; 37
 43e:	95 60       	ori	r25, 0x05	; 5
 440:	95 bd       	out	0x25, r25	; 37

	OCR0A = fan_speed; 
 442:	87 bd       	out	0x27, r24	; 39
 444:	08 95       	ret

00000446 <timer0_off>:
}

/* Disconnects Timer 0 compare output mode A from Pin B, to not allow
any PWM signals to travel to the fan.*/
void timer0_off(void) {
	OCR0A = 0;
 446:	17 bc       	out	0x27, r1	; 39
	TCCR0A &= 0x00;
 448:	84 b5       	in	r24, 0x24	; 36
 44a:	14 bc       	out	0x24, r1	; 36
	TCCR0B &= 0x00;
 44c:	85 b5       	in	r24, 0x25	; 37
 44e:	15 bc       	out	0x25, r1	; 37
 450:	08 95       	ret

00000452 <timer1_init>:

/* Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescalar 64 and initialise the duty cycles for 
each servo initial position.*/
void timer1_init(void) {	
	DDRB |= (1 << DDB1)|(1 << DDB2);
 452:	84 b1       	in	r24, 0x04	; 4
 454:	86 60       	ori	r24, 0x06	; 6
 456:	84 b9       	out	0x04, r24	; 4
	ICR1 = 4999;
 458:	87 e8       	ldi	r24, 0x87	; 135
 45a:	93 e1       	ldi	r25, 0x13	; 19
 45c:	90 93 87 00 	sts	0x0087, r25
 460:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
 464:	10 92 85 00 	sts	0x0085, r1
 468:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1)|(1<<WGM11);
 46c:	e0 e8       	ldi	r30, 0x80	; 128
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	82 6a       	ori	r24, 0xA2	; 162
 474:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10);
 476:	e1 e8       	ldi	r30, 0x81	; 129
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	8b 61       	ori	r24, 0x1B	; 27
 47e:	80 83       	st	Z, r24

	OCR1A = 650; 
 480:	8a e8       	ldi	r24, 0x8A	; 138
 482:	92 e0       	ldi	r25, 0x02	; 2
 484:	90 93 89 00 	sts	0x0089, r25
 488:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 200; 
 48c:	88 ec       	ldi	r24, 0xC8	; 200
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 93 8b 00 	sts	0x008B, r25
 494:	80 93 8a 00 	sts	0x008A, r24
 498:	08 95       	ret

0000049a <watch_delay>:
/* Pauses the program by the number of clock cycles specified. 
(3000000 on 16Mhz CPU is approx. 1.1s) */
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 49a:	61 15       	cp	r22, r1
 49c:	71 05       	cpc	r23, r1
 49e:	81 05       	cpc	r24, r1
 4a0:	91 05       	cpc	r25, r1
 4a2:	31 f0       	breq	.+12     	; 0x4b0 <watch_delay+0x16>

/* Pauses the program by the number of clock cycles specified. 
(3000000 on 16Mhz CPU is approx. 1.1s) */
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
 4a4:	dc 01       	movw	r26, r24
 4a6:	cb 01       	movw	r24, r22
	while(ticks) {
		ticks--;
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	a1 09       	sbc	r26, r1
 4ac:	b1 09       	sbc	r27, r1
/* Pauses the program by the number of clock cycles specified. 
(3000000 on 16Mhz CPU is approx. 1.1s) */
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <watch_delay+0xe>
 4b0:	08 95       	ret

000004b2 <_exit>:
 4b2:	f8 94       	cli

000004b4 <__stop_program>:
 4b4:	ff cf       	rjmp	.-2      	; 0x4b4 <__stop_program>
