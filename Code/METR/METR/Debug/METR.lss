
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011c  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008f3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000922  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000439  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000298  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fb  00000000  00000000  0000109b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014b  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f6  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#include <avr/io.h>
#include <avr/interrupt.h>

void timer_init(void) {
	ICR1 = 4999;
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	DDRB |= (1 << DDB1) | (1 << DDB4);
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	PORTB = PORTB & (1 << DDB4);
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	TCNT1 = 0;
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	TCCR1A |= (1 << COM1A1); //Enable compare output A in timer1
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Set PWM mode Frequency and Phase Correct with prescalar 8
	TCCR1B |= (1 << WGM13)|(1 << CS11);
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	TIFR1 = (0 << ICF1) | (0 << OCF1B) | (0 << OCF1A) | (0 << TOV1);
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	OCR1A = 2500; //25% duty cycle
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	TCCR1A |= (1 << COM1A1);
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitADC>:
#include <avr/io.h>
#include "AD_Convert.h"

void InitADC(void)
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
  8c:	08 95       	ret

0000008e <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
	ADMUX|=ch;         
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
  94:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;         
  96:	98 2b       	or	r25, r24
  98:	90 83       	st	Z, r25
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  a4:	80 81       	ld	r24, Z
  a6:	84 ff       	sbrs	r24, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <ReadADC+0x16>
	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);

	return(ADC);
}

  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	80 83       	st	Z, r24
uint16_t ADC_Run(uint8_t channel)
{
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
	uint16_t adc_result;
  bc:	82 2f       	mov	r24, r18
  be:	93 2f       	mov	r25, r19
  c0:	08 95       	ret

000000c2 <ADC_Run>:

	//Initialize ADC
	InitADC();
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24

	adc_result=ReadADC(channel);           // Read Analog value from channel-4
	
	return adc_result;
  c6:	0e 94 40 00 	call	0x80	; 0x80 <InitADC>
}
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <ReadADC>
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <main>:

int main(void) {
	uint8_t switches;
	int test;
	
	DDRD = 0x00;
  d4:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << DDD7); 
  da:	57 9a       	sbi	0x0a, 7	; 10
	PORTD = (1 << DDD7);
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	8b b9       	out	0x0b, r24	; 11
	while(1) {
		switches = PIND;
  e0:	c9 b1       	in	r28, 0x09	; 9
			
			//Send signal to the fan to receive power
			//DDRD |= (1 << DDD7); 
			//PORTD ^= (1 << DDD7);
			
			Mode_One(switches);
  e2:	8c 2f       	mov	r24, r28
  e4:	0e 94 7e 00 	call	0xfc	; 0xfc <Mode_One>
			
			Mode_Two(switches);
  e8:	8c 2f       	mov	r24, r28
  ea:	0e 94 89 00 	call	0x112	; 0x112 <Mode_Two>
			
			Mode_Three(switches);
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 8a 00 	call	0x114	; 0x114 <Mode_Three>
			
			Mode_Four(switches);
  f4:	8c 2f       	mov	r24, r28
  f6:	0e 94 8b 00 	call	0x116	; 0x116 <Mode_Four>
  fa:	f2 cf       	rjmp	.-28     	; 0xe0 <main+0xc>

000000fc <Mode_One>:

void Mode_One(uint8_t swiValue) {
	uint16_t adVolts;
	uint8_t value;
	
	value = swiValue & 0x03;
  fc:	83 70       	andi	r24, 0x03	; 3
	//run stationary single drop
	if (value == 0x00) {
  fe:	41 f4       	brne	.+16     	; 0x110 <Mode_One+0x14>
		adVolts = ADC_Run(0x00);
 100:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Run>
		// 1000 ADC
		if (adVolts < 0x1EB) {
 104:	8b 3e       	cpi	r24, 0xEB	; 235
 106:	91 40       	sbci	r25, 0x01	; 1
 108:	18 f4       	brcc	.+6      	; 0x110 <Mode_One+0x14>
			PORTD ^= 0x80;	//send signal to block fan from receiving power
 10a:	8b b1       	in	r24, 0x0b	; 11
 10c:	80 58       	subi	r24, 0x80	; 128
 10e:	8b b9       	out	0x0b, r24	; 11
 110:	08 95       	ret

00000112 <Mode_Two>:
	}
		
	return;
}

void Mode_Two(uint8_t swiValue) {
 112:	08 95       	ret

00000114 <Mode_Three>:
	return;
}

void Mode_Three(uint8_t swiValue) {
 114:	08 95       	ret

00000116 <Mode_Four>:
	return;
}

void Mode_Four(uint8_t swiValue) {
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
