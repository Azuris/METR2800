
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000478  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a9  00000000  00000000  00000e4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c0  00000000  00000000  000010f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000180  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <InitADC>:
#include <avr/io.h>
#include "AD_Convert.h"

void InitADC(void)
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
  8c:	08 95       	ret

0000008e <ReadADC>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
	ADMUX|=ch;         
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
}

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
  94:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;         
  96:	98 2b       	or	r25, r24
  98:	90 83       	st	Z, r25
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  a4:	80 81       	ld	r24, Z
  a6:	84 ff       	sbrs	r24, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <ReadADC+0x16>
	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);

	return(ADC);
}

  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	80 83       	st	Z, r24
uint16_t ADC_Run(uint8_t channel)
{
  b4:	20 91 78 00 	lds	r18, 0x0078
  b8:	30 91 79 00 	lds	r19, 0x0079
	uint16_t adc_result;
  bc:	82 2f       	mov	r24, r18
  be:	93 2f       	mov	r25, r19
  c0:	08 95       	ret

000000c2 <ADC_Run>:

	//Initialize ADC
	InitADC();
  c2:	cf 93       	push	r28
  c4:	c8 2f       	mov	r28, r24

	adc_result=ReadADC(channel);           // Read Analog value from channel-4
	
	return adc_result;
  c6:	0e 94 40 00 	call	0x80	; 0x80 <InitADC>
}
  ca:	8c 2f       	mov	r24, r28
  cc:	0e 94 47 00 	call	0x8e	; 0x8e <ReadADC>
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <main>:
		switches = PIND;
		if (switches & 0x04) {
			
			//Send signal to the fan to receive power
			DDRD |= (1 << DDD7); 
			PORTD = (1 << DDD7);
  d4:	d0 e8       	ldi	r29, 0x80	; 128
	OCR1A = 535; //25% duty cycle
	_delay_ms(100);
	
	return 1;**/
	while(1) {
		switches = PIND;
  d6:	c9 b1       	in	r28, 0x09	; 9
		if (switches & 0x04) {
  d8:	c2 ff       	sbrs	r28, 2
  da:	fd cf       	rjmp	.-6      	; 0xd6 <main+0x2>
			
			//Send signal to the fan to receive power
			DDRD |= (1 << DDD7); 
  dc:	57 9a       	sbi	0x0a, 7	; 10
			PORTD = (1 << DDD7);
  de:	db b9       	out	0x0b, r29	; 11
			
			Mode_One(switches);
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 7d 00 	call	0xfa	; 0xfa <Mode_One>
			
			Mode_Two(switches);
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 9f 00 	call	0x13e	; 0x13e <Mode_Two>
			
			Mode_Three(switches);
  ec:	8c 2f       	mov	r24, r28
  ee:	0e 94 a0 00 	call	0x140	; 0x140 <Mode_Three>
			
			Mode_Four(switches);
  f2:	8c 2f       	mov	r24, r28
  f4:	0e 94 a1 00 	call	0x142	; 0x142 <Mode_Four>
  f8:	ee cf       	rjmp	.-36     	; 0xd6 <main+0x2>

000000fa <Mode_One>:

void Mode_One(uint8_t swiValue) {
	uint16_t adVolts;
	uint8_t value;
	
	value = swiValue & 0x03;
  fa:	83 70       	andi	r24, 0x03	; 3
	//run stationary single drop
	if (value == 0x00) {
  fc:	f9 f4       	brne	.+62     	; 0x13c <Mode_One+0x42>
		adVolts = ADC_Run(0x00);
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_Run>
		// 1000 ADC
		if (adVolts > 0x384) {
 102:	85 38       	cpi	r24, 0x85	; 133
 104:	93 40       	sbci	r25, 0x03	; 3
 106:	18 f0       	brcs	.+6      	; 0x10e <Mode_One+0x14>
			PORTD ^= 0x80;	
 108:	8b b1       	in	r24, 0x0b	; 11
 10a:	80 58       	subi	r24, 0x80	; 128
 10c:	8b b9       	out	0x0b, r24	; 11
		} 
		DDRD |= (1 << DDD6);
 10e:	56 9a       	sbi	0x0a, 6	; 10
		TCCR0A |= 0b10000001;
 110:	84 b5       	in	r24, 0x24	; 36
 112:	81 68       	ori	r24, 0x81	; 129
 114:	84 bd       	out	0x24, r24	; 36
		TCCR0B |= 0b00000101;
 116:	85 b5       	in	r24, 0x25	; 37
 118:	85 60       	ori	r24, 0x05	; 5
 11a:	85 bd       	out	0x25, r24	; 37
		
		OCR0A = 0x0A;
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <Mode_One+0x2a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <Mode_One+0x30>
 12a:	00 00       	nop
		_delay_ms(100);
		OCR0A = 0x38;
 12c:	88 e3       	ldi	r24, 0x38	; 56
 12e:	87 bd       	out	0x27, r24	; 39
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9c e9       	ldi	r25, 0x9C	; 156
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <Mode_One+0x3a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <Mode_One+0x40>
 13a:	00 00       	nop
 13c:	08 95       	ret

0000013e <Mode_Two>:
	}
		
	return;
}

void Mode_Two(uint8_t swiValue) {
 13e:	08 95       	ret

00000140 <Mode_Three>:
	return;
}

void Mode_Three(uint8_t swiValue) {
 140:	08 95       	ret

00000142 <Mode_Four>:
	return;
}

void Mode_Four(uint8_t swiValue) {
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
