
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c5  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000265  00000000  00000000  00000d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e3  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000150  00000000  00000000  00001490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000170e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
	ADMUX|=ch;         
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);

	return(ADC);
}

  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
uint16_t ADC_Run(uint8_t channel)
{
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	uint16_t adc_result;
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	int test;
	int side;
	
	test = 0;
	side = 0;
	DDRD = 0x00;
  80:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
	//DDRD |= (1 << DDD7); 
	//PORTD = (1 << DDD7);
	timer_init();
  86:	0e 94 57 00 	call	0xae	; 0xae <timer_init>
int main(void) {
	uint8_t switches;
	int test;
	int side;
	
	test = 0;
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
	//PORTD = (1 << DDD7);
	timer_init();
	while(1) {
		switches = PIND;
		if (switches & 0x04) {
			PORTB ^= 0x04;
  8e:	54 e0       	ldi	r21, 0x04	; 4
			PORTB = 0x00;
		}**/
		test += 1;
		if (test == 30000) {
			side ^= 1;
			test = 0;
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	01 c0       	rjmp	.+2      	; 0x98 <main+0x18>
  96:	c9 01       	movw	r24, r18
	//DDRD |= (1 << DDD7); 
	//PORTD = (1 << DDD7);
	timer_init();
	while(1) {
		switches = PIND;
		if (switches & 0x04) {
  98:	4a 9b       	sbis	0x09, 2	; 9
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <main+0x22>
			PORTB ^= 0x04;
  9c:	45 b1       	in	r20, 0x05	; 5
  9e:	45 27       	eor	r20, r21
  a0:	45 b9       	out	0x05, r20	; 5
		} /**else {
			PORTB = 0x00;
		}**/
		test += 1;
  a2:	01 96       	adiw	r24, 0x01	; 1
		if (test == 30000) {
  a4:	80 33       	cpi	r24, 0x30	; 48
  a6:	45 e7       	ldi	r20, 0x75	; 117
  a8:	94 07       	cpc	r25, r20
  aa:	b1 f7       	brne	.-20     	; 0x98 <main+0x18>
  ac:	f4 cf       	rjmp	.-24     	; 0x96 <main+0x16>

000000ae <timer_init>:
//FAST PWM (1<<WGM13) (1<<WGM12) (1<<WGM11)
//Phase/Freq (1<<WGM13)
//Pre 8 (1<<CS11)
//Pre 64 (1<<CS11) (1<<CS10)
void timer_init(void) {
	ICR1 = 4999;
  ae:	87 e8       	ldi	r24, 0x87	; 135
  b0:	93 e1       	ldi	r25, 0x13	; 19
  b2:	90 93 87 00 	sts	0x0087, r25
  b6:	80 93 86 00 	sts	0x0086, r24

	//DDRB |= (1 << DDB1); //| (1 << DDB4);
	//PORTB = PORTB & (1 << DDB4);
	TCNT1 = 0;
  ba:	10 92 85 00 	sts	0x0085, r1
  be:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << WGM11); //Enable compare output A in timer1
  c2:	e0 e8       	ldi	r30, 0x80	; 128
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	82 68       	ori	r24, 0x82	; 130
  ca:	80 83       	st	Z, r24

	//Set PWM mode Frequency and Phase/FAST Correct with prescalar 64
	TCCR1B |= (1 << WGM13)|(1 << WGM12)|(1 << CS11)|(1 <<CS10);
  cc:	e1 e8       	ldi	r30, 0x81	; 129
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	8b 61       	ori	r24, 0x1B	; 27
  d4:	80 83       	st	Z, r24

	TIFR1 = (0 << ICF1) | (0 << OCF1B) | (0 << OCF1A) | (0 << TOV1);
  d6:	16 ba       	out	0x16, r1	; 22

	OCR1A = 4500; //50% duty cycle
  d8:	84 e9       	ldi	r24, 0x94	; 148
  da:	91 e1       	ldi	r25, 0x11	; 17
  dc:	90 93 89 00 	sts	0x0089, r25
  e0:	80 93 88 00 	sts	0x0088, r24
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
