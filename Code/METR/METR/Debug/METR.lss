
METR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000992  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005dc  00000000  00000000  00000a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000369  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051e  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  000018d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000182  00000000  00000000  000019fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ef  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001c6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

uint16_t ReadADC(uint8_t ch)
{
	//Select ADC Channel ch must be 0-7
	ch=ch&0x07;
	ADMUX|=ch;         
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

	return(ADC);
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
}
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

void Mode_Two() {
	uint16_t adVolts;
	
		while(1) {
			adVolts = ADC_Run(0x00);
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
			// 1000 ADC
			if (adVolts < 205) {
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR0A = 0;	//send signal to block fan from receiving power
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1A = 2000;
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				watch_delay(1500000);
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1A = 1300;
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				watch_delay(1500000);
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				OCR1A = 2000;
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
				watch_delay(1500000);
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
				OCR1A = 1300;
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
				OCR1B = 789;
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
				watch_delay(1500000);
  78:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <test_run>:
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	8a b9       	out	0x0a, r24	; 10
				OCR0A = 128;
  84:	68 94       	set
  86:	77 24       	eor	r7, r7
	side = 0;
	DDRD = (1 << DDD7);
	while(1) {
		switches = PIND;
		if (switches & 0x04) {
			PORTB ^= 0x04;
  88:	72 f8       	bld	r7, 2
		
		/**for (int i=300;i<3000;i+=50){
			OCR1A = i;
			watch_delay(150000);
		}**/
		OCR1A = 300;		
  8a:	08 e8       	ldi	r16, 0x88	; 136
  8c:	10 e0       	ldi	r17, 0x00	; 0
  8e:	0f 2e       	mov	r0, r31
  90:	fc e2       	ldi	r31, 0x2C	; 44
  92:	af 2e       	mov	r10, r31
  94:	bb 24       	eor	r11, r11
  96:	b3 94       	inc	r11
  98:	f0 2d       	mov	r31, r0
		OCR1B = 789;
  9a:	ca e8       	ldi	r28, 0x8A	; 138
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	0f 2e       	mov	r0, r31
  a0:	f5 e1       	ldi	r31, 0x15	; 21
  a2:	cf 2e       	mov	r12, r31
  a4:	f3 e0       	ldi	r31, 0x03	; 3
  a6:	df 2e       	mov	r13, r31
  a8:	f0 2d       	mov	r31, r0
		watch_delay(6000000);
		//OCR1A = 2000;
		OCR1A = 3200;
  aa:	0f 2e       	mov	r0, r31
  ac:	f0 e8       	ldi	r31, 0x80	; 128
  ae:	ef 2e       	mov	r14, r31
  b0:	fc e0       	ldi	r31, 0x0C	; 12
  b2:	ff 2e       	mov	r15, r31
  b4:	f0 2d       	mov	r31, r0
		OCR1B = 3525;
  b6:	0f 2e       	mov	r0, r31
  b8:	f5 ec       	ldi	r31, 0xC5	; 197
  ba:	8f 2e       	mov	r8, r31
  bc:	fd e0       	ldi	r31, 0x0D	; 13
  be:	9f 2e       	mov	r9, r31
  c0:	f0 2d       	mov	r31, r0
	i = 0;
	side = 0;
	DDRD = (1 << DDD7);
	while(1) {
		switches = PIND;
		if (switches & 0x04) {
  c2:	4a 9b       	sbis	0x09, 2	; 9
  c4:	03 c0       	rjmp	.+6      	; 0xcc <test_run+0x4c>
			PORTB ^= 0x04;
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	87 25       	eor	r24, r7
  ca:	85 b9       	out	0x05, r24	; 5
		
		/**for (int i=300;i<3000;i+=50){
			OCR1A = i;
			watch_delay(150000);
		}**/
		OCR1A = 300;		
  cc:	f8 01       	movw	r30, r16
  ce:	b1 82       	std	Z+1, r11	; 0x01
  d0:	a0 82       	st	Z, r10
		OCR1B = 789;
  d2:	d9 82       	std	Y+1, r13	; 0x01
  d4:	c8 82       	st	Y, r12
		watch_delay(6000000);
  d6:	60 e8       	ldi	r22, 0x80	; 128
  d8:	7d e8       	ldi	r23, 0x8D	; 141
  da:	8b e5       	ldi	r24, 0x5B	; 91
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 b7 00 	call	0x16e	; 0x16e <watch_delay>
		//OCR1A = 2000;
		OCR1A = 3200;
  e2:	f8 01       	movw	r30, r16
  e4:	f1 82       	std	Z+1, r15	; 0x01
  e6:	e0 82       	st	Z, r14
		OCR1B = 3525;
  e8:	99 82       	std	Y+1, r9	; 0x01
  ea:	88 82       	st	Y, r8
		watch_delay(6000000);
  ec:	60 e8       	ldi	r22, 0x80	; 128
  ee:	7d e8       	ldi	r23, 0x8D	; 141
  f0:	8b e5       	ldi	r24, 0x5B	; 91
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 b7 00 	call	0x16e	; 0x16e <watch_delay>
		if (side == 1) {
			OCR1A = 2000;//500;//forward
			OCR1B = 3525;//541;
		}
		i++;**/
	}
  f8:	e4 cf       	rjmp	.-56     	; 0xc2 <test_run+0x42>

000000fa <main>:

void test_run(void);

int main(void) {

	DDRD = 0x00;
  fa:	1a b8       	out	0x0a, r1	; 10
	DDRD ^= (1 << DDD7);
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	80 58       	subi	r24, 0x80	; 128
 100:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;
 102:	14 b8       	out	0x04, r1	; 4
	timer0_init();
 104:	0e 94 88 00 	call	0x110	; 0x110 <timer0_init>
	timer1_init();
 108:	0e 94 93 00 	call	0x126	; 0x126 <timer1_init>
	test_run();
 10c:	0e 94 40 00 	call	0x80	; 0x80 <test_run>

00000110 <timer0_init>:
#include "Timer0.h"
 /** Set up Timer0 on the Atmega328P to enable compare output mode on A
 for Fast PWM with clock prescaler 1024**/
void timer0_init(void) {

	DDRD |= (1 << DDD6);
 110:	56 9a       	sbi	0x0a, 6	; 10
	TCNT0 = 0;
 112:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << COM0A1)|(1<<WGM00);
 114:	84 b5       	in	r24, 0x24	; 36
 116:	81 68       	ori	r24, 0x81	; 129
 118:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02);//(1<<CS00);(1<<WGM01)|
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	85 bd       	out	0x25, r24	; 37

	OCR0A = 128; //Max = 255
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	87 bd       	out	0x27, r24	; 39
 124:	08 95       	ret

00000126 <timer1_init>:
/** Set up Timer1 on the Atmega328P to enable Compare Output mode on A and B 
for Fast PWM mode with clock prescaler 64  and initialise the duty cycle to 
5%**/
void timer1_init(void) {
	
	DDRB |= (1 << DDB1)|(1 << DDB2);
 126:	84 b1       	in	r24, 0x04	; 4
 128:	86 60       	ori	r24, 0x06	; 6
 12a:	84 b9       	out	0x04, r24	; 4
	ICR1 = 25000;//4999; //39999
 12c:	88 ea       	ldi	r24, 0xA8	; 168
 12e:	91 e6       	ldi	r25, 0x61	; 97
 130:	90 93 87 00 	sts	0x0087, r25
 134:	80 93 86 00 	sts	0x0086, r24

	TCNT1 = 0;
 138:	10 92 85 00 	sts	0x0085, r1
 13c:	10 92 84 00 	sts	0x0084, r1
	TCCR1A |= (1 << COM1A1)|(1 << COM1B1);//|(1<<WGM11); 
 140:	e0 e8       	ldi	r30, 0x80	; 128
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 6a       	ori	r24, 0xA0	; 160
 148:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13)|(1 << CS11);//|(1<<CS10);
 14a:	e1 e8       	ldi	r30, 0x81	; 129
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	82 61       	ori	r24, 0x12	; 18
 152:	80 83       	st	Z, r24

	
	OCR1A = 1300;
 154:	84 e1       	ldi	r24, 0x14	; 20
 156:	95 e0       	ldi	r25, 0x05	; 5
 158:	90 93 89 00 	sts	0x0089, r25
 15c:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 3525;
 160:	85 ec       	ldi	r24, 0xC5	; 197
 162:	9d e0       	ldi	r25, 0x0D	; 13
 164:	90 93 8b 00 	sts	0x008B, r25
 168:	80 93 8a 00 	sts	0x008A, r24
 16c:	08 95       	ret

0000016e <watch_delay>:

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 16e:	61 15       	cp	r22, r1
 170:	71 05       	cpc	r23, r1
 172:	81 05       	cpc	r24, r1
 174:	91 05       	cpc	r25, r1
 176:	31 f0       	breq	.+12     	; 0x184 <watch_delay+0x16>
}

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
	while(ticks) {
		ticks--;
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	a1 09       	sbc	r26, r1
 180:	b1 09       	sbc	r27, r1

/** 3000000 on 16Mhz CPU is approx. 1.1s **/
void watch_delay(uint32_t length) {
	uint32_t ticks;
	ticks = length;
	while(ticks) {
 182:	e1 f7       	brne	.-8      	; 0x17c <watch_delay+0xe>
 184:	08 95       	ret

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
